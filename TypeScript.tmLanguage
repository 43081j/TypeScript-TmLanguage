<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>fileTypes</key>
	<array>
		<string>ts</string>
	</array>
	<key>name</key>
	<string>TypeScript</string>
	<key>patterns</key>
	<array>
		<dict>
			<key>include</key>
			<string>#expression</string>
		</dict>
	</array>
	<key>repository</key>
	<dict>
		<key>access-modifier</key>
		<dict>
			<key>match</key>
			<string>\b(public|protected|private)\b</string>
			<key>name</key>
			<string>storage.modifier.ts</string>
		</dict>
		<key>array-literal</key>
		<dict>
			<key>begin</key>
			<string>\[</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>meta.brace.square.ts</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\]</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>meta.brace.square.ts</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.array.literal.ts</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#expression</string>
				</dict>
			</array>
		</dict>
		<key>await-modifier</key>
		<dict>
			<key>match</key>
			<string>\bawait\b</string>
			<key>name</key>
			<string>storage.modifier.await.ts</string>
		</dict>
		<key>block</key>
		<dict>
			<key>begin</key>
			<string>\{</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.block.ts</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\}</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.block.ts</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.block.ts</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#object-member</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#expression</string>
				</dict>
			</array>
		</dict>
		<key>boolean-literal</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\btrue\b</string>
					<key>name</key>
					<string>constant.language.boolean.true.ts</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\bfalse\b</string>
					<key>name</key>
					<string>constant.language.boolean.false.ts</string>
				</dict>
			</array>
		</dict>
		<key>case-clause</key>
		<dict>
			<key>begin</key>
			<string>(?&lt;!\.)\b(case|default(?=:))\b</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.switch.ts</string>
				</dict>
			</dict>
			<key>end</key>
			<string>:</string>
			<key>name</key>
			<string>case-clause.expr.ts</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#expression-type</string>
				</dict>
			</array>
		</dict>
		<key>cast</key>
		<dict>
			<key>begin</key>
			<string>(?:(?&lt;=return|throw|yield|await|[=(,:&gt;]))\s*(&lt;)(?!&lt;?\=)</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>meta.brace.angle.ts</string>
				</dict>
			</dict>
			<key>end</key>
			<string>&gt;</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>meta.brace.angle.ts</string>
				</dict>
			</dict>
			<key>name</key>
			<string>cast.expr.ts</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#type</string>
				</dict>
			</array>
		</dict>
		<key>comment</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>/\*\*(?!/)</string>
					<key>captures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.ts</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\*/</string>
					<key>name</key>
					<string>comment.block.documentation.ts</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#docblock</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>/\*</string>
					<key>captures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.ts</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\*/</string>
					<key>name</key>
					<string>comment.block.ts</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>(^[ \t]+)?(?=//)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.whitespace.comment.leading.ts</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?!\G)</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>begin</key>
							<string>//</string>
							<key>beginCaptures</key>
							<dict>
								<key>0</key>
								<dict>
									<key>name</key>
									<string>punctuation.definition.comment.ts</string>
								</dict>
							</dict>
							<key>end</key>
							<string>\n</string>
							<key>name</key>
							<string>comment.line.double-slash.ts</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>control-statement</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>(?&lt;!\.)\b(catch|finally|throw|try)\b</string>
					<key>name</key>
					<string>keyword.control.trycatch.ts</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;!\.)\b(break|continue|do|for|goto|while)\b</string>
					<key>name</key>
					<string>keyword.control.loop.ts</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;!\.)\b(await|return|yield)\b</string>
					<key>name</key>
					<string>keyword.control.flow.ts</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;!\.)\b(case|default|switch)\b</string>
					<key>name</key>
					<string>keyword.control.switch.ts</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;!\.)\b(else|if)\b</string>
					<key>name</key>
					<string>keyword.control.conditional.ts</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;!\.)\b(with)\b</string>
					<key>name</key>
					<string>keyword.control.with.ts</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;!\.)\b(debugger)\b</string>
					<key>name</key>
					<string>keyword.other.ts</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;!\.)\b(declare)\b</string>
					<key>name</key>
					<string>storage.modifier.ts</string>
				</dict>
			</array>
		</dict>
		<key>decl-block</key>
		<dict>
			<key>begin</key>
			<string>\{</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.block.ts</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\}</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.block.ts</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.decl.block.ts</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#expression</string>
				</dict>
			</array>
		</dict>
		<key>declaration</key>
		<dict>
			<key>name</key>
			<string>meta.declaration.ts</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#function-declaration</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#object-declaration</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type-declaration</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#enum-declaration</string>
				</dict>
			</array>
		</dict>
		<key>docblock</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>(?&lt;!\w)@(abstract|access|alias|arg|argument|async|attribute|augments|author|beta|borrows|bubbes|callback|chainable|class|classdesc|code|config|const|constant|constructor|constructs|copyright|default|defaultvalue|define|deprecated|desc|description|dict|emits|enum|event|example|exports?|extends|extension|extension_for|extensionfor|external|file|fileoverview|final|fires|for|function|global|host|ignore|implements|inherit[Dd]oc|inner|instance|interface|kind|lends|license|listens|main|member|memberof|method|mixex|mixins?|module|name|namespace|nocollapse|nosideeffects|override|overview|package|param|preserve|private|prop|property|protected|public|read[Oo]nly|record|require[ds]|returns?|see|since|static|struct|submodule|summary|template|this|throws|todo|tutorial|type|typedef|unrestricted|uses|var|variation|version|virtual|writeOnce)\b</string>
					<key>name</key>
					<string>storage.type.class.jsdoc</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>other.meta.jsdoc</string>
						</dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>entity.name.type.instance.jsdoc</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>variable.other.jsdoc</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>other.description.jsdoc</string>
						</dict>
					</dict>
					<key>match</key>
					<string>({\b(?:[a-zA-Z_$][a-zA-Z_$0-9]*)\b})\s\b([a-zA-Z_$][a-zA-Z_$0-9]*)\b\s*((?:(?!\*\/).)*)</string>
				</dict>
			</array>
		</dict>
		<key>enum-declaration</key>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.modifier.ts</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>storage.type.enum.ts</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>entity.name.type.enum.ts</string>
				</dict>
			</dict>
			<key>match</key>
			<string>(?:\b(const)\s+)?\b(enum)\s+([a-zA-Z_$][\w$]*)</string>
			<key>name</key>
			<string>meta.enum.declaration.ts</string>
		</dict>
		<key>expression</key>
		<dict>
			<key>name</key>
			<string>meta.expression.ts</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#for-in-simple</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#string</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#regex</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#template</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#paren-expression</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#var-expr</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#declaration</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#cast</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#new-expr</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#switch-statement</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#block</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#import-operator</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#expression-operator</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#imply-operator</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#operators</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#storage-keyword</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type-primitive</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#function-call</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#case-clause</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#control-statement</string>
				</dict>
			</array>
		</dict>
		<key>expression-operator</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\bdelete\b</string>
					<key>name</key>
					<string>keyword.operator.delete.ts</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\bin\b</string>
					<key>name</key>
					<string>keyword.operator.in.ts</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\bof\b</string>
					<key>name</key>
					<string>keyword.operator.of.ts</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\binstanceof\b</string>
					<key>name</key>
					<string>keyword.operator.instanceof.ts</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\bnew\b</string>
					<key>name</key>
					<string>keyword.operator.new.ts</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\btypeof\b</string>
					<key>name</key>
					<string>keyword.operator.typeof.ts</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\bvoid\b</string>
					<key>name</key>
					<string>keyword.operator.void.ts</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\bas\b</string>
					<key>name</key>
					<string>keyword.control.as.ts</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\bis\b</string>
					<key>name</key>
					<string>keyword.operator.is.ts</string>
				</dict>
			</array>
		</dict>
		<key>expression-type</key>
		<dict>
			<key>name</key>
			<string>meta.expression.ts</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#string</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#regex</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#template</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#paren-expression</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#ternary-expression</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#import-operator</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#expression-operator</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#imply-operator</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#operators</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type-primitive</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#function-call</string>
				</dict>
			</array>
		</dict>
		<key>field-declaration</key>
		<dict>
			<key>begin</key>
			<string>(?&lt;!\()\s*((?:\b[a-zA-Z_$][\w$]*)|(?:\'[^']*\')|(?:\"[^"]*\"))\s*(\?\s*)?(?=(=|:))</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>variable.object.property.ts</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>keyword.operator.optional.ts</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?=\}|;|,|$)|(?&lt;=\})</string>
			<key>name</key>
			<string>meta.field.declaration.ts</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#ternary-expression</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type-annotation</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#expression</string>
				</dict>
			</array>
		</dict>
		<key>for-in-simple</key>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.type.ts</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>variable.other.readwrite.ts</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>keyword.operator.in.ts</string>
				</dict>
				<key>4</key>
				<dict>
					<key>name</key>
					<string>keyword.operator.of.ts</string>
				</dict>
			</dict>
			<key>match</key>
			<string>(?&lt;=\()\s*\b(var|let|const)\s+([a-zA-Z_$][\w$]*)\s+(?:(in)|(of))\b</string>
			<key>name</key>
			<string>forin.expr.ts</string>
		</dict>
		<key>function-call</key>
		<dict>
			<key>name</key>
			<string>functioncall.expr.ts</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#await-modifier</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type-parameters</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#paren-expression</string>
				</dict>
			</array>
		</dict>
		<key>function-declaration</key>
		<dict>
			<key>begin</key>
			<string>\b(?:(export)\s+)?(?:(async)\s+)?(function\b)(?:\s+([a-zA-Z_$][\w$]*))?\s*</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.export.ts</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>storage.modifier.async.ts</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>storage.type.function.ts</string>
				</dict>
				<key>4</key>
				<dict>
					<key>name</key>
					<string>entity.name.function.ts</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?=;|\})|(?&lt;=\})</string>
			<key>name</key>
			<string>meta.function.ts</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type-parameters</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#function-type-parameters</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#return-type</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#function-overload-declaration</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#decl-block</string>
				</dict>
			</array>
		</dict>
		<key>function-overload-declaration</key>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.export.ts</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>storage.type.function.ts</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>entity.name.function.ts</string>
				</dict>
			</dict>
			<key>match</key>
			<string>\b(?:(export)\s+)?(function\b)(?:\s+([a-zA-Z_$][\w$]*))?\s*</string>
			<key>name</key>
			<string>meta.function.overload.ts</string>
		</dict>
		<key>function-type-parameters</key>
		<dict>
			<key>begin</key>
			<string>\(</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.parameters.begin.ts</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\)</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.parameters.end.ts</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.function.type.parameter.ts</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#parameter-name</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type-annotation</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#variable-initializer</string>
				</dict>
			</array>
		</dict>
		<key>imply-operator</key>
		<dict>
			<key>match</key>
			<string>=&gt;</string>
			<key>name</key>
			<string>storage.type.function.arrow.ts</string>
		</dict>
		<key>import-operator</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\bimport\b</string>
					<key>name</key>
					<string>keyword.control.import.ts</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\bfrom\b</string>
					<key>name</key>
					<string>keyword.control.from.ts</string>
				</dict>
			</array>
		</dict>
		<key>indexer-declaration</key>
		<dict>
			<key>begin</key>
			<string>\[</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>meta.brace.square.ts</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(\])\s*(\?\s*)?|$</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>meta.brace.square.ts</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>keyword.operator.optional.ts</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.indexer.declaration.ts</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#type-annotation</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#indexer-parameter</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#expression</string>
				</dict>
			</array>
		</dict>
		<key>indexer-parameter</key>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>variable.parameter.ts</string>
				</dict>
			</dict>
			<key>match</key>
			<string>([a-zA-Z_$][\w$]*)(?=\:)</string>
			<key>name</key>
			<string>meta.indexer.parameter.ts</string>
		</dict>
		<key>literal</key>
		<dict>
			<key>name</key>
			<string>literal.ts</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#numeric-literal</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#boolean-literal</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#null-literal</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#undefined-literal</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#numericConstant-literal</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#array-literal</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#this-literal</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#super-literal</string>
				</dict>
			</array>
		</dict>
		<key>method-declaration</key>
		<dict>
			<key>begin</key>
			<string>\b(?:(abstract)\s+)?\b(?:(public|private|protected)\s+)?\b(?:(async)\s+)?(?:(get|set)\s+)?(?:(new)|(?:\b(constructor)\b)|(?:([a-zA-Z_$][\.\w$]*)\s*(\??)))?\s*(?=\(|\&lt;)</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.modifier.ts</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>storage.modifier.ts</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>storage.modifier.async.ts</string>
				</dict>
				<key>4</key>
				<dict>
					<key>name</key>
					<string>storage.type.property.ts</string>
				</dict>
				<key>5</key>
				<dict>
					<key>name</key>
					<string>keyword.operator.new.ts</string>
				</dict>
				<key>6</key>
				<dict>
					<key>name</key>
					<string>storage.type.ts</string>
				</dict>
				<key>7</key>
				<dict>
					<key>name</key>
					<string>entity.name.function.ts</string>
				</dict>
				<key>8</key>
				<dict>
					<key>name</key>
					<string>keyword.operator.optional.ts</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?=\}|;|,)|(?&lt;=\})</string>
			<key>name</key>
			<string>meta.method.declaration.ts</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type-parameters</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#function-type-parameters</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#return-type</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#method-overload-declaration</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#decl-block</string>
				</dict>
			</array>
		</dict>
		<key>method-overload-declaration</key>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.modifier.ts</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>storage.modifier.ts</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>storage.modifier.ts</string>
				</dict>
				<key>4</key>
				<dict>
					<key>name</key>
					<string>storage.type.property.ts</string>
				</dict>
				<key>5</key>
				<dict>
					<key>name</key>
					<string>keyword.operator.ts</string>
				</dict>
				<key>6</key>
				<dict>
					<key>name</key>
					<string>entity.name.function.constructor.ts</string>
				</dict>
				<key>7</key>
				<dict>
					<key>name</key>
					<string>entity.name.function.ts</string>
				</dict>
				<key>8</key>
				<dict>
					<key>name</key>
					<string>keyword.operator.optional.ts</string>
				</dict>
			</dict>
			<key>match</key>
			<string>\b(?:(abstract)\s+)?\b(?:(public|private|protected)\s+)?\b(?:(async)\s+)?(?:(get|set)\s+)?(?:(new)|(?:\b(constructor)\b)|(?:([a-zA-Z_$][\.\w$]*)\s*(\??)))?\s*(?=\(|\&lt;)</string>
			<key>name</key>
			<string>meta.method.overload.declaration.ts</string>
		</dict>
		<key>new-expr</key>
		<dict>
			<key>begin</key>
			<string>\b(new)\b</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.operator.new.ts</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?=[(;]|$)</string>
			<key>name</key>
			<string>new.expr.ts</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#type</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
			</array>
		</dict>
		<key>null-literal</key>
		<dict>
			<key>match</key>
			<string>\bnull\b</string>
			<key>name</key>
			<string>constant.language.null.ts</string>
		</dict>
		<key>numeric-literal</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\b(?&lt;!\$)0(x|X)[0-9a-fA-F]+\b(?!\$)</string>
					<key>name</key>
					<string>constant.numeric.hex.ts</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(?&lt;!\$)0(b|B)[01]+\b(?!\$)</string>
					<key>name</key>
					<string>constant.numeric.binary.ts</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(?&lt;!\$)0(o|O)?[0-7]+\b(?!\$)</string>
					<key>name</key>
					<string>constant.numeric.octal.ts</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>constant.numeric.decimal.ts</string>
						</dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>meta.delimiter.decimal.period.ts</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>meta.delimiter.decimal.period.ts</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>meta.delimiter.decimal.period.ts</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>meta.delimiter.decimal.period.ts</string>
						</dict>
						<key>5</key>
						<dict>
							<key>name</key>
							<string>meta.delimiter.decimal.period.ts</string>
						</dict>
						<key>6</key>
						<dict>
							<key>name</key>
							<string>meta.delimiter.decimal.period.ts</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?x)
(?&lt;!\$)(?:
  (?:\b[0-9]+(\.)[0-9]+[eE][+-]?[0-9]+\b)| # 1.1E+3
  (?:\b[0-9]+(\.)[eE][+-]?[0-9]+\b)|       # 1.E+3
  (?:\B(\.)[0-9]+[eE][+-]?[0-9]+\b)|       # .1E+3
  (?:\b[0-9]+[eE][+-]?[0-9]+\b)|            # 1E+3
  (?:\b[0-9]+(\.)[0-9]+\b)|                # 1.1
  (?:\b[0-9]+(\.)\B)|                      # 1.
  (?:\B(\.)[0-9]+\b)|                      # .1
  (?:\b[0-9]+\b(?!\.))                     # 1
)(?!\$)</string>
				</dict>
			</array>
		</dict>
		<key>numericConstant-literal</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\bNaN\b</string>
					<key>name</key>
					<string>constant.language.nan.ts</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\bInfinity\b</string>
					<key>name</key>
					<string>constant.language.infinity.ts</string>
				</dict>
			</array>
		</dict>
		<key>object-body</key>
		<dict>
			<key>begin</key>
			<string>\{</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.block.ts</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\}</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.block.ts</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.object.body.ts</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#string</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#field-declaration</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#method-declaration</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#indexer-declaration</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type-annotation</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#variable-initializer</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#access-modifier</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#static-modifier</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#property-accessor</string>
				</dict>
			</array>
		</dict>
		<key>object-declaration</key>
		<dict>
			<key>begin</key>
			<string>\b(?:(export)\s+)?\b(?:(abstract)\s+)?\b(?&lt;!\.)(?:(class)|(interface))\b</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.export.ts</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>storage.modifier.ts</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>storage.type.class.ts</string>
				</dict>
				<key>4</key>
				<dict>
					<key>name</key>
					<string>storage.type.interface.ts</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?&lt;=\})</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.block.ts</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.declaration.object.ts</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#object-heritage</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#object-name</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type-parameters</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#object-body</string>
				</dict>
			</array>
		</dict>
		<key>object-heritage</key>
		<dict>
			<key>begin</key>
			<string>(?:\b(extends|implements)\b)</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.modifier.ts</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?=\{)</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.block.ts</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.object.heritage.ts</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#object-heritage</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type-parameters</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#object-heritage-type</string>
				</dict>
			</array>
		</dict>
		<key>object-heritage-type</key>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>entity.other.inherited-class.ts</string>
				</dict>
			</dict>
			<key>match</key>
			<string>(?:\b([a-zA-Z_$][\w$]*)\b)</string>
			<key>name</key>
			<string>meta.object.heritage.parent.ts</string>
		</dict>
		<key>object-member</key>
		<dict>
			<key>begin</key>
			<string>[a-zA-Z_$][\w$]*\s*:</string>
			<key>end</key>
			<string>(?=,|\})</string>
			<key>name</key>
			<string>meta.object.member.ts</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#expression</string>
				</dict>
			</array>
		</dict>
		<key>object-name</key>
		<dict>
			<key>captures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>entity.name.class.ts</string>
				</dict>
			</dict>
			<key>match</key>
			<string>[a-zA-Z_$][\w$]*</string>
			<key>name</key>
			<string>meta.object.name.ts</string>
		</dict>
		<key>operators</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\*=|(?&lt;!\()/=|%=|\+=|\-=</string>
					<key>name</key>
					<string>keyword.operator.assignment.compound.ts</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\&amp;=|\^=|&lt;&lt;=|&gt;&gt;=|&gt;&gt;&gt;=|\|=</string>
					<key>name</key>
					<string>keyword.operator.assignment.compound.bitwise.ts</string>
				</dict>
				<dict>
					<key>match</key>
					<string>===|!==|==|!=</string>
					<key>name</key>
					<string>keyword.operator.comparison.ts</string>
				</dict>
				<dict>
					<key>match</key>
					<string>&lt;=|&gt;=|&lt;&gt;|&lt;|&gt;</string>
					<key>name</key>
					<string>keyword.operator.relational.ts</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\!|&amp;&amp;|\|\|</string>
					<key>name</key>
					<string>keyword.operator.logical.ts</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\&amp;|~|\^|\|</string>
					<key>name</key>
					<string>keyword.operator.bitwise.ts</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\=</string>
					<key>name</key>
					<string>keyword.operator.assignment.ts</string>
				</dict>
				<dict>
					<key>match</key>
					<string>--</string>
					<key>name</key>
					<string>keyword.operator.decrement.ts</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\+\+</string>
					<key>name</key>
					<string>keyword.operator.increment.ts</string>
				</dict>
				<dict>
					<key>match</key>
					<string>%|\*|/|-|\+</string>
					<key>name</key>
					<string>keyword.operator.arithmetic.ts</string>
				</dict>
			</array>
		</dict>
		<key>parameter-name</key>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.modifier.ts</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>keyword.operator.spread.ts</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>variable.parameter.ts</string>
				</dict>
				<key>4</key>
				<dict>
					<key>name</key>
					<string>keyword.operator.optional.ts</string>
				</dict>
			</dict>
			<key>match</key>
			<string>(?:\s*\b(public|private|protected)\b\s+)?(\.\.\.)?\s*([a-zA-Z_$][\w$]*)\s*(\??)</string>
		</dict>
		<key>paren-expression</key>
		<dict>
			<key>begin</key>
			<string>\(</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>meta.brace.round.ts</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\)</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>meta.brace.round.ts</string>
				</dict>
			</dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#expression</string>
				</dict>
			</array>
		</dict>
		<key>property-accessor</key>
		<dict>
			<key>match</key>
			<string>\b(get|set)\b</string>
			<key>name</key>
			<string>storage.type.property.ts</string>
		</dict>
		<key>qstring-double</key>
		<dict>
			<key>begin</key>
			<string>"</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.ts</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(")|((?:[^\\\n])$)</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.ts</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>invalid.illegal.newline.ts</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.quoted.double.ts</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#string-character-escape</string>
				</dict>
			</array>
		</dict>
		<key>qstring-single</key>
		<dict>
			<key>begin</key>
			<string>'</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.ts</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(\')|((?:[^\\\n])$)</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.ts</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>invalid.illegal.newline.ts</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.quoted.single.ts</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#string-character-escape</string>
				</dict>
			</array>
		</dict>
		<key>regex</key>
		<dict>
			<key>begin</key>
			<string>(?&lt;=[=(:,\[?+!]|^|return|=&gt;|&amp;&amp;|\|\|)\s*(/)(?![/*+{}?])(?=.*/)</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.ts</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(/)([gimuy]*)</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.ts</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>keyword.other.ts</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.regex.ts</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#regexp</string>
				</dict>
			</array>
		</dict>
		<key>regex-character-class</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\\[wWsSdD]|\.</string>
					<key>name</key>
					<string>constant.other.character-class.regexp</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\\([0-7]{3}|x\h\h|u\h\h\h\h)</string>
					<key>name</key>
					<string>constant.character.numeric.regexp</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\\c[A-Z]</string>
					<key>name</key>
					<string>constant.character.control.regexp</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\\.</string>
					<key>name</key>
					<string>constant.character.escape.backslash.regexp</string>
				</dict>
			</array>
		</dict>
		<key>regexp</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\\[bB]|\^|\$</string>
					<key>name</key>
					<string>keyword.control.anchor.regexp</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\\[1-9]\d*</string>
					<key>name</key>
					<string>keyword.other.back-reference.regexp</string>
				</dict>
				<dict>
					<key>match</key>
					<string>[?+*]|\{(\d+,\d+|\d+,|,\d+|\d+)\}\??</string>
					<key>name</key>
					<string>keyword.operator.quantifier.regexp</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\|</string>
					<key>name</key>
					<string>keyword.operator.or.regexp</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>(\()((\?=)|(\?!))</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.group.regexp</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.group.assertion.regexp</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>meta.assertion.look-ahead.regexp</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>meta.assertion.negative-look-ahead.regexp</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(\))</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.group.regexp</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.group.assertion.regexp</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#regexp</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>\((\?:)?</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.group.regexp</string>
						</dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.group.capture.regexp</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\)</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.group.regexp</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.group.regexp</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#regexp</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(\[)(\^)?</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.character-class.regexp</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.negation.regexp</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(\])</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.character-class.regexp</string>
						</dict>
					</dict>
					<key>name</key>
					<string>constant.other.character-class.set.regexp</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>captures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>constant.character.numeric.regexp</string>
								</dict>
								<key>2</key>
								<dict>
									<key>name</key>
									<string>constant.character.control.regexp</string>
								</dict>
								<key>3</key>
								<dict>
									<key>name</key>
									<string>constant.character.escape.backslash.regexp</string>
								</dict>
								<key>4</key>
								<dict>
									<key>name</key>
									<string>constant.character.numeric.regexp</string>
								</dict>
								<key>5</key>
								<dict>
									<key>name</key>
									<string>constant.character.control.regexp</string>
								</dict>
								<key>6</key>
								<dict>
									<key>name</key>
									<string>constant.character.escape.backslash.regexp</string>
								</dict>
							</dict>
							<key>match</key>
							<string>(?:.|(\\(?:[0-7]{3}|x\h\h|u\h\h\h\h))|(\\c[A-Z])|(\\.))\-(?:[^\]\\]|(\\(?:[0-7]{3}|x\h\h|u\h\h\h\h))|(\\c[A-Z])|(\\.))</string>
							<key>name</key>
							<string>constant.other.character-class.range.regexp</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#regex-character-class</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>include</key>
					<string>#regex-character-class</string>
				</dict>
			</array>
		</dict>
		<key>return-type</key>
		<dict>
			<key>begin</key>
			<string>(?&lt;=\))\s*:</string>
			<key>end</key>
			<string>(?&lt;!:)((?=$)|(?=\{|;|//))</string>
			<key>name</key>
			<string>meta.return.type.ts</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(?&lt;=:)\s*(\{)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.block.ts</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\}</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.block.ts</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.object.type.ts</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#type-object-members</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>include</key>
					<string>#type</string>
				</dict>
			</array>
		</dict>
		<key>static-modifier</key>
		<dict>
			<key>match</key>
			<string>\b(static)\b</string>
			<key>name</key>
			<string>storage.modifier.ts</string>
		</dict>
		<key>storage-keyword</key>
		<dict>
			<key>match</key>
			<string>\b(var|let|function|const|module|namespace|void|export)\b</string>
			<key>name</key>
			<string>storage.type.ts</string>
		</dict>
		<key>string</key>
		<dict>
			<key>name</key>
			<string>string.ts</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#qstring-single</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#qstring-double</string>
				</dict>
			</array>
		</dict>
		<key>string-character-escape</key>
		<dict>
			<key>match</key>
			<string>\\(x\h{2}|[0-2][0-7]{0,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.|$)</string>
			<key>name</key>
			<string>constant.character.escape.ts</string>
		</dict>
		<key>super-literal</key>
		<dict>
			<key>match</key>
			<string>\bsuper\b</string>
			<key>name</key>
			<string>variable.language.super.ts</string>
		</dict>
		<key>switch-block</key>
		<dict>
			<key>begin</key>
			<string>{</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.block.ts</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?=\})</string>
			<key>name</key>
			<string>switch-block.expr.ts</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#expression</string>
				</dict>
			</array>
		</dict>
		<key>switch-expression</key>
		<dict>
			<key>begin</key>
			<string>\b(switch)\b\s*\(</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.switch.ts</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\)</string>
			<key>name</key>
			<string>switch-expression.expr.ts</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#expression</string>
				</dict>
			</array>
		</dict>
		<key>switch-statement</key>
		<dict>
			<key>begin</key>
			<string>(?=\bswitch\b\s*\()</string>
			<key>end</key>
			<string>}</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.block.ts</string>
				</dict>
			</dict>
			<key>name</key>
			<string>switch-statement.expr.ts</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#switch-expression</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#switch-block</string>
				</dict>
			</array>
		</dict>
		<key>template</key>
		<dict>
			<key>begin</key>
			<string>(?:\b([a-zA-Z_$][a-zA-Z_$0-9]*)\b)?(`)</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>entity.name.function.tagged-template.ts</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.template.begin.ts</string>
				</dict>
			</dict>
			<key>end</key>
			<string>`</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.template.end.ts</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.template.ts</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#template-substitution-element</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#string-character-escape</string>
				</dict>
			</array>
		</dict>
		<key>template-substitution-element</key>
		<dict>
			<key>begin</key>
			<string>\$\{</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.template-expression.begin.ts</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\}</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.template-expression.end.ts</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.template.expression.ts</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#expression</string>
				</dict>
			</array>
		</dict>
		<key>ternary-expression</key>
		<dict>
			<key>begin</key>
			<string>(?=\?)</string>
			<key>end</key>
			<string>(?=$|[;,])</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#ternary-operator</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#expression-type</string>
				</dict>
			</array>
		</dict>
		<key>ternary-operator</key>
		<dict>
			<key>begin</key>
			<string>(\?)</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>keyword.operator.ternary.ts</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(:)</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>keyword.operator.ternary.ts</string>
				</dict>
			</dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#expression-type</string>
				</dict>
			</array>
		</dict>
		<key>this-literal</key>
		<dict>
			<key>match</key>
			<string>\bthis\b</string>
			<key>name</key>
			<string>variable.language.this.ts</string>
		</dict>
		<key>type</key>
		<dict>
			<key>name</key>
			<string>meta.type.ts</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#type-primitive</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type-parameters</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type-tuple</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type-object</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type-operator</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type-paren-or-function-type-parameters</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type-function-return-type</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type-name</string>
				</dict>
			</array>
		</dict>
		<key>type-annotation</key>
		<dict>
			<key>begin</key>
			<string>:</string>
			<key>end</key>
			<string>(?=$|[,);\}\]]|//)|(?==[^&gt;])|(?&lt;=[\}&gt;\]\)]|[a-zA-Z_$])\s*(?=\{)</string>
			<key>name</key>
			<string>meta.type.annotation.ts</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#expression-operator</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#string</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
			</array>
		</dict>
		<key>type-declaration</key>
		<dict>
			<key>begin</key>
			<string>\b(type)\b\s+([a-zA-Z_$][\w$]*)\s*</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.type.type.ts</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>entity.name.type.ts</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?=$|[,);&gt;]|var|type|function|class|interface|namespace|enum|declare|export)</string>
			<key>name</key>
			<string>meta.type.declaration.ts</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type-parameters</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type</string>
				</dict>
				<dict>
					<key>match</key>
					<string>=\s*</string>
					<key>name</key>
					<string>keyword.operator.assignment.ts</string>
				</dict>
			</array>
		</dict>
		<key>type-function-return-type</key>
		<dict>
			<key>begin</key>
			<string>=&gt;</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>storage.type.function.arrow.ts</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?&lt;!=&gt;)(?=[,\]\)\{\}=;&gt;]|//|$)</string>
			<key>name</key>
			<string>meta.type.function.return.ts</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(?&lt;==&gt;)\s*(\{)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.block.ts</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\}</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.block.ts</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.object.type.ts</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#type-object-members</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>include</key>
					<string>#type</string>
				</dict>
			</array>
		</dict>
		<key>type-name</key>
		<dict>
			<key>match</key>
			<string>[a-zA-Z_$][.\w$]*</string>
			<key>name</key>
			<string>entity.name.type.ts</string>
		</dict>
		<key>type-object</key>
		<dict>
			<key>begin</key>
			<string>\{</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.block.ts</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\}</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.block.ts</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.object.type.ts</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#type-object-members</string>
				</dict>
			</array>
		</dict>
		<key>type-object-members</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#field-declaration</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#method-declaration</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#indexer-declaration</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type-annotation</string>
				</dict>
			</array>
		</dict>
		<key>type-operator</key>
		<dict>
			<key>match</key>
			<string>[.|]</string>
			<key>name</key>
			<string>keyword.operator.type.ts</string>
		</dict>
		<key>type-parameters</key>
		<dict>
			<key>begin</key>
			<string>([a-zA-Z_$][\w$]*)?(&lt;)</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>entity.name.type.ts</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.typeparameters.begin.ts</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?=$)|(&gt;)</string>
			<key>endCaptures</key>
			<dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.typeparameters.end.ts</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.type.parameters.ts</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\b(extends)\b</string>
					<key>name</key>
					<string>storage.modifier.ts</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type</string>
				</dict>
			</array>
		</dict>
		<key>type-paren-or-function-type-parameters</key>
		<dict>
			<key>begin</key>
			<string>(?:\b(new)\b)?\s*(\()</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.new.ts</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>meta.brace.round.ts</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\)</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>meta.brace.round.ts</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.type.paren.cover.ts</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#function-type-parameters</string>
				</dict>
			</array>
		</dict>
		<key>type-primitive</key>
		<dict>
			<key>match</key>
			<string>\b(string|number|boolean|symbol|any|void|never)\b</string>
			<key>name</key>
			<string>support.type.primitive.ts</string>
		</dict>
		<key>type-tuple</key>
		<dict>
			<key>begin</key>
			<string>\[</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>meta.brace.square.ts</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\]</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>meta.brace.square.ts</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.type.tuple.ts</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#type</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
			</array>
		</dict>
		<key>undefined-literal</key>
		<dict>
			<key>match</key>
			<string>\bundefined\b</string>
			<key>name</key>
			<string>constant.language.undefined.ts</string>
		</dict>
		<key>var-expr</key>
		<dict>
			<key>begin</key>
			<string>(?&lt;!\()\s*\b(var|let|const(?!\s+enum))\b</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.type.ts</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?=$|;)</string>
			<key>name</key>
			<string>meta.var.expr.ts</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#var-single-variable</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
			</array>
		</dict>
		<key>var-single-variable</key>
		<dict>
			<key>begin</key>
			<string>\b([a-zA-Z_$][\w$]*)\s*(=?)</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>variable.other.readwrite.ts</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?=$|[;,])</string>
			<key>name</key>
			<string>meta.var-single-variable.expr.ts</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#ternary-expression</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type-annotation</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#string</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#expression</string>
				</dict>
			</array>
		</dict>
		<key>variable-initializer</key>
		<dict>
			<key>begin</key>
			<string>(=)</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.operator.assignment.ts</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?=$|[,);=])</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#expression</string>
				</dict>
			</array>
		</dict>
	</dict>
	<key>scopeName</key>
	<string>source.ts</string>
	<key>uuid</key>
	<string>ef98eb90-bf9b-11e4-bb52-0800200c9a66</string>
</dict>
</plist>
