original file
-----------------------------------
for (i = 0; i<len ; i++) {
  if (foo) {
    bar = true 
    break 
  }
}
-----------------------------------

Grammar: TypeScript.tmLanguage
-----------------------------------
>for (i = 0; i<len ; i++) {
 ^^^
 source.ts keyword.control.loop.ts
    ^
    source.ts
     ^
     source.ts meta.brace.round.ts
      ^^
      source.ts
        ^
        source.ts keyword.operator.assignment.ts
         ^
         source.ts
          ^
          source.ts constant.numeric.decimal.ts
           ^
           source.ts punctuation.terminator.statement.ts
            ^^
            source.ts
              ^
              source.ts keyword.operator.relational.ts
               ^^^^
               source.ts
                   ^
                   source.ts punctuation.terminator.statement.ts
                    ^^
                    source.ts
                      ^^
                      source.ts keyword.operator.increment.ts
                        ^
                        source.ts meta.brace.round.ts
                         ^
                         source.ts
                          ^
                          source.ts meta.block.ts punctuation.definition.block.ts
                           ^^
                           source.ts meta.block.ts
>  if (foo) {
 ^^
 source.ts meta.block.ts
   ^^
   source.ts meta.block.ts keyword.control.conditional.ts
     ^
     source.ts meta.block.ts
      ^
      source.ts meta.block.ts meta.brace.round.ts
       ^^^
       source.ts meta.block.ts
          ^
          source.ts meta.block.ts meta.brace.round.ts
           ^
           source.ts meta.block.ts
            ^
            source.ts meta.block.ts meta.block.ts punctuation.definition.block.ts
             ^^
             source.ts meta.block.ts meta.block.ts
>    bar = true 
 ^^^^^^^^
 source.ts meta.block.ts meta.block.ts
         ^
         source.ts meta.block.ts meta.block.ts keyword.operator.assignment.ts
          ^
          source.ts meta.block.ts meta.block.ts
           ^^^^
           source.ts meta.block.ts meta.block.ts constant.language.boolean.true.ts
               ^^^
               source.ts meta.block.ts meta.block.ts
>    break 
 ^^^^
 source.ts meta.block.ts meta.block.ts
     ^^^^^
     source.ts meta.block.ts meta.block.ts keyword.control.loop.ts
          ^^^
          source.ts meta.block.ts meta.block.ts
>  }
 ^^
 source.ts meta.block.ts meta.block.ts
   ^
   source.ts meta.block.ts meta.block.ts punctuation.definition.block.ts
    ^^
    source.ts meta.block.ts
>}
 ^
 source.ts meta.block.ts punctuation.definition.block.ts


Grammar: TypeScriptReact.tmLanguage
-----------------------------------
>for (i = 0; i<len ; i++) {
 ^^^
 source.tsx keyword.control.loop.tsx
    ^
    source.tsx
     ^
     source.tsx meta.brace.round.tsx
      ^^
      source.tsx
        ^
        source.tsx keyword.operator.assignment.tsx
         ^
         source.tsx
          ^
          source.tsx constant.numeric.decimal.tsx
           ^
           source.tsx punctuation.terminator.statement.tsx
            ^^
            source.tsx
              ^
              source.tsx meta.tag.tsx punctuation.definition.tag.begin.tsx
               ^^^
               source.tsx meta.tag.tsx entity.name.tag.tsx
                  ^
                  source.tsx meta.tag.tsx
                   ^
                   source.tsx meta.tag.tsx invalid.illegal.attribute.tsx
                    ^
                    source.tsx meta.tag.tsx
                     ^^^^
                     source.tsx meta.tag.tsx invalid.illegal.attribute.tsx
                         ^
                         source.tsx meta.tag.tsx
                          ^
                          source.tsx meta.tag.tsx meta.brace.curly.tsx punctuation.definition.brace.curly.start.tsx
                           ^^
                           source.tsx meta.tag.tsx meta.brace.curly.tsx
>  if (foo) {
 ^^
 source.tsx meta.tag.tsx meta.brace.curly.tsx
   ^^
   source.tsx meta.tag.tsx meta.brace.curly.tsx variable.function.tsx
     ^
     source.tsx meta.tag.tsx meta.brace.curly.tsx
      ^
      source.tsx meta.tag.tsx meta.brace.curly.tsx meta.brace.round.tsx
       ^^^
       source.tsx meta.tag.tsx meta.brace.curly.tsx
          ^
          source.tsx meta.tag.tsx meta.brace.curly.tsx meta.brace.round.tsx
           ^
           source.tsx meta.tag.tsx meta.brace.curly.tsx
            ^
            source.tsx meta.tag.tsx meta.brace.curly.tsx meta.object-literal.tsx punctuation.definition.block.tsx
             ^^
             source.tsx meta.tag.tsx meta.brace.curly.tsx meta.object-literal.tsx
>    bar = true 
 ^^^^^^^^^^^^^^^^^
 source.tsx meta.tag.tsx meta.brace.curly.tsx meta.object-literal.tsx
>    break 
 ^^^^^^^^^^^^
 source.tsx meta.tag.tsx meta.brace.curly.tsx meta.object-literal.tsx
>  }
 ^^
 source.tsx meta.tag.tsx meta.brace.curly.tsx meta.object-literal.tsx
   ^
   source.tsx meta.tag.tsx meta.brace.curly.tsx meta.object-literal.tsx punctuation.definition.block.tsx
    ^^
    source.tsx meta.tag.tsx meta.brace.curly.tsx
>}
 ^
 source.tsx meta.tag.tsx meta.brace.curly.tsx punctuation.definition.brace.curly.end.tsx