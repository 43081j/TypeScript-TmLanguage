original file
-----------------------------------
function myFunction(param1, param2, number, string, boolean) {
  let y = (number) => {
    console.log(param1);
  }
  console.log(param1);
  console.log(param1 + number);
  console.log(string);
  console.log(boolean);
  let x = param1 ? 2 : param2;
}
-----------------------------------

>function myFunction(param1, param2, number, string, boolean) {
 ^^^^^^^^
 source.ts meta.function.ts storage.type.function.ts
         ^
         source.ts meta.function.ts
          ^^^^^^^^^^
          source.ts meta.function.ts entity.name.function.ts
                    ^
                    source.ts meta.function.ts meta.parameters.ts punctuation.definition.parameters.begin.ts
                     ^^^^^^
                     source.ts meta.function.ts meta.parameters.ts variable.parameter.ts
                           ^
                           source.ts meta.function.ts meta.parameters.ts
                            ^
                            source.ts meta.function.ts meta.parameters.ts
                             ^^^^^^
                             source.ts meta.function.ts meta.parameters.ts variable.parameter.ts
                                   ^
                                   source.ts meta.function.ts meta.parameters.ts
                                    ^
                                    source.ts meta.function.ts meta.parameters.ts
                                     ^^^^^^
                                     source.ts meta.function.ts meta.parameters.ts variable.parameter.ts
                                           ^
                                           source.ts meta.function.ts meta.parameters.ts
                                            ^
                                            source.ts meta.function.ts meta.parameters.ts
                                             ^^^^^^
                                             source.ts meta.function.ts meta.parameters.ts variable.parameter.ts
                                                   ^
                                                   source.ts meta.function.ts meta.parameters.ts
                                                    ^
                                                    source.ts meta.function.ts meta.parameters.ts
                                                     ^^^^^^^
                                                     source.ts meta.function.ts meta.parameters.ts variable.parameter.ts
                                                            ^
                                                            source.ts meta.function.ts meta.parameters.ts punctuation.definition.parameters.end.ts
                                                             ^
                                                             source.ts meta.function.ts
                                                              ^
                                                              source.ts meta.function.ts meta.block.ts punctuation.definition.block.ts
>  let y = (number) => {
 ^^
 source.ts meta.function.ts meta.block.ts
   ^^^
   source.ts meta.function.ts meta.block.ts meta.var.expr.ts storage.type.ts
      ^
      source.ts meta.function.ts meta.block.ts meta.var.expr.ts
       ^
       source.ts meta.function.ts meta.block.ts meta.var.expr.ts meta.var-single-variable.expr.ts variable.other.readwrite.ts
        ^
        source.ts meta.function.ts meta.block.ts meta.var.expr.ts meta.var-single-variable.expr.ts
         ^
         source.ts meta.function.ts meta.block.ts meta.var.expr.ts meta.var-single-variable.expr.ts keyword.operator.assignment.ts
          ^
          source.ts meta.function.ts meta.block.ts meta.var.expr.ts meta.var-single-variable.expr.ts
           ^
           source.ts meta.function.ts meta.block.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.brace.round.ts
            ^^^^^^
            source.ts meta.function.ts meta.block.ts meta.var.expr.ts meta.var-single-variable.expr.ts
                  ^
                  source.ts meta.function.ts meta.block.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.brace.round.ts
                   ^
                   source.ts meta.function.ts meta.block.ts meta.var.expr.ts meta.var-single-variable.expr.ts
                    ^^
                    source.ts meta.function.ts meta.block.ts meta.var.expr.ts meta.var-single-variable.expr.ts storage.type.function.arrow.ts
                      ^
                      source.ts meta.function.ts meta.block.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.block.ts
                       ^
                       source.ts meta.function.ts meta.block.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.block.ts punctuation.definition.block.ts
>    console.log(param1);
 ^^^^^^^^^^^^^^^
 source.ts meta.function.ts meta.block.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.block.ts
                ^
                source.ts meta.function.ts meta.block.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.block.ts meta.brace.round.ts
                 ^^^^^^
                 source.ts meta.function.ts meta.block.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.block.ts
                       ^
                       source.ts meta.function.ts meta.block.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.block.ts meta.brace.round.ts
                        ^^
                        source.ts meta.function.ts meta.block.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.block.ts
>  }
 ^^
 source.ts meta.function.ts meta.block.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.block.ts
   ^
   source.ts meta.function.ts meta.block.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.block.ts punctuation.definition.block.ts
>  console.log(param1);
 ^^^^^^^^^^^^^
 source.ts meta.function.ts meta.block.ts
              ^
              source.ts meta.function.ts meta.block.ts meta.brace.round.ts
               ^^^^^^
               source.ts meta.function.ts meta.block.ts
                     ^
                     source.ts meta.function.ts meta.block.ts meta.brace.round.ts
                      ^^
                      source.ts meta.function.ts meta.block.ts
>  console.log(param1 + number);
 ^^^^^^^^^^^^^
 source.ts meta.function.ts meta.block.ts
              ^
              source.ts meta.function.ts meta.block.ts meta.brace.round.ts
               ^^^^^^^
               source.ts meta.function.ts meta.block.ts
                      ^
                      source.ts meta.function.ts meta.block.ts keyword.operator.arithmetic.ts
                       ^^^^^^^
                       source.ts meta.function.ts meta.block.ts
                              ^
                              source.ts meta.function.ts meta.block.ts meta.brace.round.ts
                               ^^
                               source.ts meta.function.ts meta.block.ts
>  console.log(string);
 ^^^^^^^^^^^^^
 source.ts meta.function.ts meta.block.ts
              ^
              source.ts meta.function.ts meta.block.ts meta.brace.round.ts
               ^^^^^^
               source.ts meta.function.ts meta.block.ts
                     ^
                     source.ts meta.function.ts meta.block.ts meta.brace.round.ts
                      ^^
                      source.ts meta.function.ts meta.block.ts
>  console.log(boolean);
 ^^^^^^^^^^^^^
 source.ts meta.function.ts meta.block.ts
              ^
              source.ts meta.function.ts meta.block.ts meta.brace.round.ts
               ^^^^^^^
               source.ts meta.function.ts meta.block.ts
                      ^
                      source.ts meta.function.ts meta.block.ts meta.brace.round.ts
                       ^^
                       source.ts meta.function.ts meta.block.ts
>  let x = param1 ? 2 : param2;
 ^^
 source.ts meta.function.ts meta.block.ts
   ^^^
   source.ts meta.function.ts meta.block.ts meta.var.expr.ts storage.type.ts
      ^
      source.ts meta.function.ts meta.block.ts meta.var.expr.ts
       ^
       source.ts meta.function.ts meta.block.ts meta.var.expr.ts meta.var-single-variable.expr.ts variable.other.readwrite.ts
        ^
        source.ts meta.function.ts meta.block.ts meta.var.expr.ts meta.var-single-variable.expr.ts
         ^
         source.ts meta.function.ts meta.block.ts meta.var.expr.ts meta.var-single-variable.expr.ts keyword.operator.assignment.ts
          ^^^^^^^^
          source.ts meta.function.ts meta.block.ts meta.var.expr.ts meta.var-single-variable.expr.ts
                  ^
                  source.ts meta.function.ts meta.block.ts meta.var.expr.ts meta.var-single-variable.expr.ts keyword.operator.ternary.ts
                   ^
                   source.ts meta.function.ts meta.block.ts meta.var.expr.ts meta.var-single-variable.expr.ts
                    ^
                    source.ts meta.function.ts meta.block.ts meta.var.expr.ts meta.var-single-variable.expr.ts constant.numeric.decimal.ts
                     ^
                     source.ts meta.function.ts meta.block.ts meta.var.expr.ts meta.var-single-variable.expr.ts
                      ^
                      source.ts meta.function.ts meta.block.ts meta.var.expr.ts meta.var-single-variable.expr.ts keyword.operator.ternary.ts
                       ^^^^^^^
                       source.ts meta.function.ts meta.block.ts meta.var.expr.ts meta.var-single-variable.expr.ts
                              ^^
                              source.ts meta.function.ts meta.block.ts
>}
 ^
 source.ts meta.function.ts meta.block.ts punctuation.definition.block.ts