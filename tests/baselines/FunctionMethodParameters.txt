original file
-----------------------------------
/* Function parameter tests */
function testFunctionParamType(
    ^^m1: string, 
    ^^m2: {},
    ^^m3: any [],
    ^^m4: {a: A, b: B},
    ^^m5: () => void,
    ^^m6: (x:(string), y:[number, string]) => number,
    ^^m7: Array<number>,
    ^^m8: [number, number],
    ^^m9: {a: A, b: B} | [number, number], 
    ^^m10: (() => void) | string[]): number {
    ^^return m6.length;
}

class testClass {
    /* method param type tests */
    public testMethodParamType(
        ^^m1: string, 
        ^^m2: {},
        ^^m3: any [],
        ^^m4: {a: A, b: B},
        ^^m5: () => void,
        ^^m6: (x:(string), y:[number, string]) => number,
        ^^m7: Array<number>,
        ^^m8: [number, number],
        ^^m9: {a: A, b: B} | [number, number], 
        ^^m10: (() => void) | string[]): number {
        ^^return m6.length;
    }
}
-----------------------------------

>/* Function parameter tests */
>function testFunctionParamType(
>    m1: string, 
     ^^
     [3, 5]: source.ts meta.function.ts meta.function.type.parameter.ts variable.parameter.ts 
>    m2: {},
     ^^
     [4, 5]: source.ts meta.function.ts meta.function.type.parameter.ts variable.parameter.ts 
>    m3: any [],
     ^^
     [5, 5]: source.ts meta.function.ts meta.function.type.parameter.ts variable.parameter.ts 
>    m4: {a: A, b: B},
     ^^
     [6, 5]: source.ts meta.function.ts meta.function.type.parameter.ts variable.parameter.ts 
>    m5: () => void,
     ^^
     [7, 5]: source.ts meta.function.ts meta.function.type.parameter.ts variable.parameter.ts 
>    m6: (x:(string), y:[number, string]) => number,
     ^^
     [8, 5]: source.ts meta.function.ts meta.function.type.parameter.ts variable.parameter.ts 
>    m7: Array<number>,
     ^^
     [9, 5]: source.ts meta.function.ts meta.function.type.parameter.ts variable.parameter.ts 
>    m8: [number, number],
     ^^
     [10, 5]: source.ts meta.function.ts meta.function.type.parameter.ts variable.parameter.ts 
>    m9: {a: A, b: B} | [number, number], 
     ^^
     [11, 5]: source.ts meta.function.ts meta.function.type.parameter.ts variable.parameter.ts 
>    m10: (() => void) | string[]): number {
     ^^^
     [12, 5]: source.ts meta.function.ts meta.function.type.parameter.ts variable.parameter.ts 
>    return m6.length;
     ^^^^^^
     [13, 5]: source.ts meta.function.ts meta.decl.block.ts keyword.control.flow.ts 
>}
>
>class testClass {
>    /* method param type tests */
>    public testMethodParamType(
>        m1: string, 
         ^^
         [19, 9]: source.ts meta.declaration.object.ts meta.object.body.ts meta.method.declaration.ts meta.function.type.parameter.ts variable.parameter.ts 
>        m2: {},
         ^^
         [20, 9]: source.ts meta.declaration.object.ts meta.object.body.ts meta.method.declaration.ts meta.function.type.parameter.ts variable.parameter.ts 
>        m3: any [],
         ^^
         [21, 9]: source.ts meta.declaration.object.ts meta.object.body.ts meta.method.declaration.ts meta.function.type.parameter.ts variable.parameter.ts 
>        m4: {a: A, b: B},
         ^^
         [22, 9]: source.ts meta.declaration.object.ts meta.object.body.ts meta.method.declaration.ts meta.function.type.parameter.ts variable.parameter.ts 
>        m5: () => void,
         ^^
         [23, 9]: source.ts meta.declaration.object.ts meta.object.body.ts meta.method.declaration.ts meta.function.type.parameter.ts variable.parameter.ts 
>        m6: (x:(string), y:[number, string]) => number,
         ^^
         [24, 9]: source.ts meta.declaration.object.ts meta.object.body.ts meta.method.declaration.ts meta.function.type.parameter.ts variable.parameter.ts 
>        m7: Array<number>,
         ^^
         [25, 9]: source.ts meta.declaration.object.ts meta.object.body.ts meta.method.declaration.ts meta.function.type.parameter.ts variable.parameter.ts 
>        m8: [number, number],
         ^^
         [26, 9]: source.ts meta.declaration.object.ts meta.object.body.ts meta.method.declaration.ts meta.function.type.parameter.ts variable.parameter.ts 
>        m9: {a: A, b: B} | [number, number], 
         ^^
         [27, 9]: source.ts meta.declaration.object.ts meta.object.body.ts meta.method.declaration.ts meta.function.type.parameter.ts variable.parameter.ts 
>        m10: (() => void) | string[]): number {
         ^^^
         [28, 9]: source.ts meta.declaration.object.ts meta.object.body.ts meta.method.declaration.ts meta.function.type.parameter.ts variable.parameter.ts 
>        return m6.length;
         ^^^^^^
         [29, 9]: source.ts meta.declaration.object.ts meta.object.body.ts meta.method.declaration.ts meta.decl.block.ts keyword.control.flow.ts 
>    }
>}