>// Issue: https://github.com/Microsoft/TypeScript-Sublime-Plugin/issues/292
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 source.ts comment.line.ts
>
 ^
 source.ts
>var object = {
 ^^^
 source.ts meta.var.expr.ts storage.type.ts
    ^
    source.ts meta.var.expr.ts
     ^^^^^^
     source.ts meta.var.expr.ts meta.var-single-variable.expr.ts variable.ts
           ^^
           source.ts meta.var.expr.ts meta.var-single-variable.expr.ts
             ^
             source.ts meta.var.expr.ts meta.var-single-variable.expr.ts
              ^
              source.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.block.ts meta.brace.curly.ts
>    setTransform: <(domNode: HTMLElement, desiredValue: string) => void>null,
 ^^^^
 source.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.block.ts
     ^^^^^^^^^^^^^
     source.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.block.ts meta.object.member.ts
                  ^
                  source.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.block.ts meta.object.member.ts cast.expr.ts
                   ^
                   source.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.block.ts meta.object.member.ts cast.expr.ts meta.brace.angle.ts
                    ^
                    source.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.block.ts meta.object.member.ts cast.expr.ts meta.type.paren.cover.ts
                     ^^^^^^^
                     source.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.block.ts meta.object.member.ts cast.expr.ts meta.type.paren.cover.ts meta.type.name.ts
                            ^^
                            source.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.block.ts meta.object.member.ts cast.expr.ts meta.type.paren.cover.ts
                              ^^^^^^^^^^^
                              source.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.block.ts meta.object.member.ts cast.expr.ts meta.type.paren.cover.ts meta.type.name.ts
                                         ^^
                                         source.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.block.ts meta.object.member.ts cast.expr.ts meta.type.paren.cover.ts
                                           ^^^^^^^^^^^^
                                           source.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.block.ts meta.object.member.ts cast.expr.ts meta.type.paren.cover.ts meta.type.name.ts
                                                       ^^
                                                       source.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.block.ts meta.object.member.ts cast.expr.ts meta.type.paren.cover.ts
                                                         ^^^^^^
                                                         source.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.block.ts meta.object.member.ts cast.expr.ts meta.type.paren.cover.ts meta.type.primitive.ts support.type.ts
                                                               ^
                                                               source.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.block.ts meta.object.member.ts cast.expr.ts meta.type.paren.cover.ts
                                                                ^
                                                                source.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.block.ts meta.object.member.ts cast.expr.ts
                                                                 ^^
                                                                 source.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.block.ts meta.object.member.ts cast.expr.ts meta.type.function.return.ts keyword.operator.ts
                                                                   ^
                                                                   source.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.block.ts meta.object.member.ts cast.expr.ts meta.type.function.return.ts
                                                                    ^^^^
                                                                    source.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.block.ts meta.object.member.ts cast.expr.ts meta.type.function.return.ts meta.type.primitive.ts support.type.ts
                                                                        ^
                                                                        source.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.block.ts meta.object.member.ts cast.expr.ts meta.brace.angle.ts
                                                                         ^^^^
                                                                         source.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.block.ts meta.object.member.ts constant.language.null.ts
                                                                             ^^
                                                                             source.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.block.ts
>    setDisplay: (domNode: HTMLElement, desiredValue: string) => {
 ^^^^
 source.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.block.ts
     ^^^^^^^^^^^
     source.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.block.ts meta.object.member.ts
                ^
                source.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.block.ts meta.object.member.ts
                 ^
                 source.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.block.ts meta.object.member.ts meta.brace.paren.ts
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                  source.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.block.ts meta.object.member.ts
                                                      ^^^^^^
                                                      source.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.block.ts meta.object.member.ts meta.type.primitive.ts support.type.ts
                                                            ^
                                                            source.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.block.ts meta.object.member.ts meta.brace.paren.ts
                                                             ^
                                                             source.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.block.ts meta.object.member.ts
                                                              ^^
                                                              source.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.block.ts meta.object.member.ts keyword.operator.ts
                                                                ^
                                                                source.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.block.ts meta.object.member.ts
                                                                 ^
                                                                 source.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.block.ts meta.object.member.ts meta.block.ts meta.brace.curly.ts
>        if (domNode.style.display !== desiredValue) {
 ^^^^^^^^
 source.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.block.ts meta.object.member.ts meta.block.ts
         ^^
         source.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.block.ts meta.object.member.ts meta.block.ts keyword.control.ts
           ^
           source.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.block.ts meta.object.member.ts meta.block.ts
            ^
            source.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.block.ts meta.object.member.ts meta.block.ts meta.brace.paren.ts
             ^^^^^^^^^^^^^^^^^^^^^^
             source.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.block.ts meta.object.member.ts meta.block.ts
                                   ^^^
                                   source.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.block.ts meta.object.member.ts meta.block.ts keyword.operator.comparison.ts
                                      ^^^^^^^^^^^^^
                                      source.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.block.ts meta.object.member.ts meta.block.ts
                                                   ^
                                                   source.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.block.ts meta.object.member.ts meta.block.ts meta.brace.paren.ts
                                                    ^
                                                    source.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.block.ts meta.object.member.ts meta.block.ts
                                                     ^
                                                     source.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.block.ts meta.object.member.ts meta.block.ts meta.block.ts meta.brace.curly.ts
>            domNode.style.display = desiredValue;
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 source.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.block.ts meta.object.member.ts meta.block.ts meta.block.ts
                                   ^
                                   source.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.block.ts meta.object.member.ts meta.block.ts meta.block.ts keyword.operator.comparison.ts
                                    ^^^^^^^^^^^^^^^
                                    source.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.block.ts meta.object.member.ts meta.block.ts meta.block.ts
>        }
 ^^^^^^^^
 source.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.block.ts meta.object.member.ts meta.block.ts meta.block.ts
         ^
         source.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.block.ts meta.object.member.ts meta.block.ts meta.block.ts meta.brace.curly.ts
>    }
 ^^^^
 source.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.block.ts meta.object.member.ts meta.block.ts
     ^
     source.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.block.ts meta.object.member.ts meta.block.ts meta.brace.curly.ts
>}
 ^
 source.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.block.ts meta.brace.curly.ts
>
 ^
 source.ts
>function f(x: string | ((value: string) => number)) {
 ^^^^^^^^
 source.ts meta.function.ts storage.type.function.ts
         ^
         source.ts meta.function.ts
          ^
          source.ts meta.function.ts entity.name.function.ts
           ^
           source.ts meta.function.ts meta.function.type.parameter.ts meta.brace.round.ts
            ^
            source.ts meta.function.ts meta.function.type.parameter.ts parameter.name.ts variable.parameter.ts
             ^
             source.ts meta.function.ts meta.function.type.parameter.ts meta.type.annotation.ts
              ^
              source.ts meta.function.ts meta.function.type.parameter.ts meta.type.annotation.ts
               ^^^^^^
               source.ts meta.function.ts meta.function.type.parameter.ts meta.type.annotation.ts meta.type.primitive.ts support.type.ts
                     ^
                     source.ts meta.function.ts meta.function.type.parameter.ts meta.type.annotation.ts
                      ^
                      source.ts meta.function.ts meta.function.type.parameter.ts meta.type.annotation.ts keyword.operator.type.ts
                       ^^
                       source.ts meta.function.ts meta.function.type.parameter.ts meta.type.annotation.ts meta.type.paren.cover.ts
                         ^
                         source.ts meta.function.ts meta.function.type.parameter.ts meta.type.annotation.ts meta.type.paren.cover.ts meta.type.paren.cover.ts
                          ^^^^^
                          source.ts meta.function.ts meta.function.type.parameter.ts meta.type.annotation.ts meta.type.paren.cover.ts meta.type.paren.cover.ts meta.type.name.ts
                               ^^
                               source.ts meta.function.ts meta.function.type.parameter.ts meta.type.annotation.ts meta.type.paren.cover.ts meta.type.paren.cover.ts
                                 ^^^^^^
                                 source.ts meta.function.ts meta.function.type.parameter.ts meta.type.annotation.ts meta.type.paren.cover.ts meta.type.paren.cover.ts meta.type.primitive.ts support.type.ts
                                       ^
                                       source.ts meta.function.ts meta.function.type.parameter.ts meta.type.annotation.ts meta.type.paren.cover.ts meta.type.paren.cover.ts
                                        ^
                                        source.ts meta.function.ts meta.function.type.parameter.ts meta.type.annotation.ts meta.type.paren.cover.ts
                                         ^^
                                         source.ts meta.function.ts meta.function.type.parameter.ts meta.type.annotation.ts meta.type.paren.cover.ts meta.type.function.return.ts keyword.operator.ts
                                           ^
                                           source.ts meta.function.ts meta.function.type.parameter.ts meta.type.annotation.ts meta.type.paren.cover.ts meta.type.function.return.ts
                                            ^^^^^^
                                            source.ts meta.function.ts meta.function.type.parameter.ts meta.type.annotation.ts meta.type.paren.cover.ts meta.type.function.return.ts meta.type.primitive.ts support.type.ts
                                                  ^
                                                  source.ts meta.function.ts meta.function.type.parameter.ts meta.type.annotation.ts meta.type.paren.cover.ts
                                                   ^
                                                   source.ts meta.function.ts meta.function.type.parameter.ts meta.brace.round.ts
                                                    ^
                                                    source.ts meta.function.ts
                                                     ^
                                                     source.ts meta.function.ts meta.decl.block.ts meta.brace.curly.ts
>    if (typeof x === "string") {
 ^^^^
 source.ts meta.function.ts meta.decl.block.ts
     ^^
     source.ts meta.function.ts meta.decl.block.ts keyword.control.ts
       ^
       source.ts meta.function.ts meta.decl.block.ts
        ^
        source.ts meta.function.ts meta.decl.block.ts meta.brace.paren.ts
         ^^^^^^
         source.ts meta.function.ts meta.decl.block.ts keyword.others.ts
               ^^^
               source.ts meta.function.ts meta.decl.block.ts
                  ^^^
                  source.ts meta.function.ts meta.decl.block.ts keyword.operator.comparison.ts
                     ^
                     source.ts meta.function.ts meta.decl.block.ts
                      ^
                      source.ts meta.function.ts meta.decl.block.ts string.double.ts
                       ^^^^^^
                       source.ts meta.function.ts meta.decl.block.ts string.double.ts
                             ^
                             source.ts meta.function.ts meta.decl.block.ts string.double.ts
                              ^
                              source.ts meta.function.ts meta.decl.block.ts meta.brace.paren.ts
                               ^
                               source.ts meta.function.ts meta.decl.block.ts
                                ^
                                source.ts meta.function.ts meta.decl.block.ts meta.block.ts meta.brace.curly.ts
>        return +x
 ^^^^^^^^
 source.ts meta.function.ts meta.decl.block.ts meta.block.ts
         ^^^^^^
         source.ts meta.function.ts meta.decl.block.ts meta.block.ts keyword.control.ts
               ^
               source.ts meta.function.ts meta.decl.block.ts meta.block.ts
                ^
                source.ts meta.function.ts meta.decl.block.ts meta.block.ts keyword.operator.arithmetic.ts
                 ^^
                 source.ts meta.function.ts meta.decl.block.ts meta.block.ts
>    }
 ^^^^
 source.ts meta.function.ts meta.decl.block.ts meta.block.ts
     ^
     source.ts meta.function.ts meta.decl.block.ts meta.block.ts meta.brace.curly.ts
>    else {
 ^^^^
 source.ts meta.function.ts meta.decl.block.ts
     ^^^^
     source.ts meta.function.ts meta.decl.block.ts keyword.control.ts
         ^
         source.ts meta.function.ts meta.decl.block.ts
          ^
          source.ts meta.function.ts meta.decl.block.ts meta.block.ts meta.brace.curly.ts
>        let f = <(v: string) => number> x
 ^^^^^^^^
 source.ts meta.function.ts meta.decl.block.ts meta.block.ts meta.var.expr.ts
         ^^^
         source.ts meta.function.ts meta.decl.block.ts meta.block.ts meta.var.expr.ts storage.type.ts
            ^
            source.ts meta.function.ts meta.decl.block.ts meta.block.ts meta.var.expr.ts
             ^
             source.ts meta.function.ts meta.decl.block.ts meta.block.ts meta.var.expr.ts meta.var-single-variable.expr.ts variable.ts
              ^^
              source.ts meta.function.ts meta.decl.block.ts meta.block.ts meta.var.expr.ts meta.var-single-variable.expr.ts
                ^
                source.ts meta.function.ts meta.decl.block.ts meta.block.ts meta.var.expr.ts meta.var-single-variable.expr.ts cast.expr.ts
                 ^
                 source.ts meta.function.ts meta.decl.block.ts meta.block.ts meta.var.expr.ts meta.var-single-variable.expr.ts cast.expr.ts meta.brace.angle.ts
                  ^
                  source.ts meta.function.ts meta.decl.block.ts meta.block.ts meta.var.expr.ts meta.var-single-variable.expr.ts cast.expr.ts meta.type.paren.cover.ts
                   ^
                   source.ts meta.function.ts meta.decl.block.ts meta.block.ts meta.var.expr.ts meta.var-single-variable.expr.ts cast.expr.ts meta.type.paren.cover.ts meta.type.name.ts
                    ^^
                    source.ts meta.function.ts meta.decl.block.ts meta.block.ts meta.var.expr.ts meta.var-single-variable.expr.ts cast.expr.ts meta.type.paren.cover.ts
                      ^^^^^^
                      source.ts meta.function.ts meta.decl.block.ts meta.block.ts meta.var.expr.ts meta.var-single-variable.expr.ts cast.expr.ts meta.type.paren.cover.ts meta.type.primitive.ts support.type.ts
                            ^
                            source.ts meta.function.ts meta.decl.block.ts meta.block.ts meta.var.expr.ts meta.var-single-variable.expr.ts cast.expr.ts meta.type.paren.cover.ts
                             ^
                             source.ts meta.function.ts meta.decl.block.ts meta.block.ts meta.var.expr.ts meta.var-single-variable.expr.ts cast.expr.ts
                              ^^
                              source.ts meta.function.ts meta.decl.block.ts meta.block.ts meta.var.expr.ts meta.var-single-variable.expr.ts cast.expr.ts meta.type.function.return.ts keyword.operator.ts
                                ^
                                source.ts meta.function.ts meta.decl.block.ts meta.block.ts meta.var.expr.ts meta.var-single-variable.expr.ts cast.expr.ts meta.type.function.return.ts
                                 ^^^^^^
                                 source.ts meta.function.ts meta.decl.block.ts meta.block.ts meta.var.expr.ts meta.var-single-variable.expr.ts cast.expr.ts meta.type.function.return.ts meta.type.primitive.ts support.type.ts
                                       ^
                                       source.ts meta.function.ts meta.decl.block.ts meta.block.ts meta.var.expr.ts meta.var-single-variable.expr.ts cast.expr.ts meta.brace.angle.ts
                                        ^^
                                        source.ts meta.function.ts meta.decl.block.ts meta.block.ts meta.var.expr.ts meta.var-single-variable.expr.ts
>        return f("hello world")
 ^^^^^^^^
 source.ts meta.function.ts meta.decl.block.ts meta.block.ts
         ^^^^^^
         source.ts meta.function.ts meta.decl.block.ts meta.block.ts keyword.control.ts
               ^^
               source.ts meta.function.ts meta.decl.block.ts meta.block.ts
                 ^
                 source.ts meta.function.ts meta.decl.block.ts meta.block.ts meta.brace.paren.ts
                  ^
                  source.ts meta.function.ts meta.decl.block.ts meta.block.ts string.double.ts
                   ^^^^^^^^^^^
                   source.ts meta.function.ts meta.decl.block.ts meta.block.ts string.double.ts
                              ^
                              source.ts meta.function.ts meta.decl.block.ts meta.block.ts string.double.ts
                               ^
                               source.ts meta.function.ts meta.decl.block.ts meta.block.ts meta.brace.paren.ts
>    }
 ^^^^
 source.ts meta.function.ts meta.decl.block.ts meta.block.ts
     ^
     source.ts meta.function.ts meta.decl.block.ts meta.block.ts meta.brace.curly.ts
>}
 ^
 source.ts meta.function.ts meta.decl.block.ts meta.brace.curly.ts
>
 ^
 source.ts
>
 ^
 source.ts