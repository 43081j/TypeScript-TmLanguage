original file
-----------------------------------
// Issue: https://github.com/Microsoft/TypeScript-Sublime-Plugin/issues/292

var object = {
    setTransform: ^^<^^(^^domNode: ^^HTMLElement, ^^desiredValue: ^^string) ^^=> ^^void>^^null,
    setDisplay: (domNode: HTMLElement, desiredValue: string) => {
        if (domNode.style.display !== desiredValue) {
            domNode.style.display = desiredValue;
        }
    }
}

function f(x: string | ((value: string) => number)) {
    if (typeof x === "string") {
        return +x
    }
    else {
        let f = ^^<^^(^^v: ^^string) ^^=> ^^number^^> ^^x
        return f("hello world")
    }
}


-----------------------------------

>// Issue: https://github.com/Microsoft/TypeScript-Sublime-Plugin/issues/292
>
>var object = {
>    setTransform: <(domNode: HTMLElement, desiredValue: string) => void>null,
                   ^
                   [4, 19]: source.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.object-literal.ts meta.object.member.ts cast.expr.ts meta.brace.angle.ts 
                    ^
                    [4, 20]: source.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.object-literal.ts meta.object.member.ts cast.expr.ts meta.type.paren.cover.ts meta.brace.round.ts 
                     ^^^^^^^
                     [4, 21]: source.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.object-literal.ts meta.object.member.ts cast.expr.ts meta.type.paren.cover.ts entity.name.type.ts 
                              ^^^^^^^^^^^
                              [4, 30]: source.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.object-literal.ts meta.object.member.ts cast.expr.ts meta.type.paren.cover.ts entity.name.type.ts 
                                           ^^^^^^^^^^^^
                                           [4, 43]: source.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.object-literal.ts meta.object.member.ts cast.expr.ts meta.type.paren.cover.ts entity.name.type.ts 
                                                         ^^^^^^
                                                         [4, 57]: source.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.object-literal.ts meta.object.member.ts cast.expr.ts meta.type.paren.cover.ts support.type.primitive.ts 
                                                                 ^^
                                                                 [4, 65]: source.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.object-literal.ts meta.object.member.ts cast.expr.ts meta.type.function.return.ts storage.type.function.arrow.ts 
                                                                    ^^^^
                                                                    [4, 68]: source.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.object-literal.ts meta.object.member.ts cast.expr.ts meta.type.function.return.ts support.type.primitive.ts 
                                                                         ^^^^
                                                                         [4, 73]: source.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.object-literal.ts meta.object.member.ts constant.language.null.ts 
>    setDisplay: (domNode: HTMLElement, desiredValue: string) => {
>        if (domNode.style.display !== desiredValue) {
>            domNode.style.display = desiredValue;
>        }
>    }
>}
>
>function f(x: string | ((value: string) => number)) {
>    if (typeof x === "string") {
>        return +x
>    }
>    else {
>        let f = <(v: string) => number> x
                 ^
                 [17, 17]: source.ts meta.function.ts meta.block.ts meta.block.ts meta.var.expr.ts meta.var-single-variable.expr.ts cast.expr.ts meta.brace.angle.ts 
                  ^
                  [17, 18]: source.ts meta.function.ts meta.block.ts meta.block.ts meta.var.expr.ts meta.var-single-variable.expr.ts cast.expr.ts meta.type.paren.cover.ts meta.brace.round.ts 
                   ^
                   [17, 19]: source.ts meta.function.ts meta.block.ts meta.block.ts meta.var.expr.ts meta.var-single-variable.expr.ts cast.expr.ts meta.type.paren.cover.ts entity.name.type.ts 
                      ^^^^^^
                      [17, 22]: source.ts meta.function.ts meta.block.ts meta.block.ts meta.var.expr.ts meta.var-single-variable.expr.ts cast.expr.ts meta.type.paren.cover.ts support.type.primitive.ts 
                              ^^
                              [17, 30]: source.ts meta.function.ts meta.block.ts meta.block.ts meta.var.expr.ts meta.var-single-variable.expr.ts cast.expr.ts meta.type.function.return.ts storage.type.function.arrow.ts 
                                 ^^^^^^
                                 [17, 33]: source.ts meta.function.ts meta.block.ts meta.block.ts meta.var.expr.ts meta.var-single-variable.expr.ts cast.expr.ts meta.type.function.return.ts support.type.primitive.ts 
                                       ^
                                       [17, 39]: source.ts meta.function.ts meta.block.ts meta.block.ts meta.var.expr.ts meta.var-single-variable.expr.ts cast.expr.ts meta.brace.angle.ts 
                                        ^^
                                        [17, 41]: source.ts meta.function.ts meta.block.ts meta.block.ts meta.var.expr.ts meta.var-single-variable.expr.ts 
>        return f("hello world")
>    }
>}
>
>