original file
-----------------------------------
// @onlyOwnGrammar - As this has type parameters that would be jsx in tsx files
const method1 = <T>(
    param1: T,
    param2: T
): Promise<T> => {
    return param1;
};
const method2 = async <T>(
    param1: T,
    param2: T
): Promise<T> => {
    return param1;
};
-----------------------------------

Grammar: TypeScript.tmLanguage
-----------------------------------
>// @onlyOwnGrammar - As this has type parameters that would be jsx in tsx files
 ^^
 source.ts comment.line.double-slash.ts punctuation.definition.comment.ts
   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   source.ts comment.line.double-slash.ts
>const method1 = <T>(
 ^^^^^
 source.ts meta.var.expr.ts storage.type.ts
      ^
      source.ts meta.var.expr.ts
       ^^^^^^^
       source.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.definition.variable.ts entity.name.function.ts
              ^
              source.ts meta.var.expr.ts meta.var-single-variable.expr.ts
               ^
               source.ts meta.var.expr.ts keyword.operator.assignment.ts
                ^
                source.ts meta.var.expr.ts
                 ^
                 source.ts meta.var.expr.ts meta.type.parameters.ts punctuation.definition.typeparameters.begin.ts
                  ^
                  source.ts meta.var.expr.ts meta.type.parameters.ts entity.name.type.ts
                   ^
                   source.ts meta.var.expr.ts meta.type.parameters.ts punctuation.definition.typeparameters.end.ts
                    ^
                    source.ts meta.var.expr.ts meta.brace.round.ts
                     ^^
                     source.ts meta.var.expr.ts
>    param1: T,
 ^^^^
 source.ts meta.var.expr.ts
     ^^^^^^
     source.ts meta.var.expr.ts variable.parameter.ts
           ^
           source.ts meta.var.expr.ts meta.type.annotation.ts keyword.operator.type.annotation.ts
            ^
            source.ts meta.var.expr.ts meta.type.annotation.ts
             ^
             source.ts meta.var.expr.ts meta.type.annotation.ts entity.name.type.ts
              ^
              source.ts meta.var.expr.ts punctuation.separator.parameter.ts
               ^^
               source.ts meta.var.expr.ts
>    param2: T
 ^^^^
 source.ts meta.var.expr.ts
     ^^^^^^
     source.ts meta.var.expr.ts variable.parameter.ts
           ^
           source.ts meta.var.expr.ts meta.type.annotation.ts keyword.operator.type.annotation.ts
            ^
            source.ts meta.var.expr.ts meta.type.annotation.ts
             ^
             source.ts meta.var.expr.ts meta.type.annotation.ts entity.name.type.ts
              ^
              source.ts meta.var.expr.ts meta.type.annotation.ts
>): Promise<T> => {
 ^
 source.ts meta.var.expr.ts meta.brace.round.ts
  ^
  source.ts meta.var.expr.ts meta.arrow.ts meta.return.type.arrow.ts keyword.operator.type.annotation.ts
   ^
   source.ts meta.var.expr.ts meta.arrow.ts meta.return.type.arrow.ts
    ^^^^^^^
    source.ts meta.var.expr.ts meta.arrow.ts meta.return.type.arrow.ts entity.name.type.ts
           ^
           source.ts meta.var.expr.ts meta.arrow.ts meta.return.type.arrow.ts meta.type.parameters.ts punctuation.definition.typeparameters.begin.ts
            ^
            source.ts meta.var.expr.ts meta.arrow.ts meta.return.type.arrow.ts meta.type.parameters.ts entity.name.type.ts
             ^
             source.ts meta.var.expr.ts meta.arrow.ts meta.return.type.arrow.ts meta.type.parameters.ts punctuation.definition.typeparameters.end.ts
              ^
              source.ts meta.var.expr.ts meta.arrow.ts meta.return.type.arrow.ts
               ^^
               source.ts meta.var.expr.ts meta.arrow.ts storage.type.function.arrow.ts
                 ^
                 source.ts meta.var.expr.ts meta.arrow.ts
                  ^
                  source.ts meta.var.expr.ts meta.arrow.ts meta.block.ts punctuation.definition.block.ts
                   ^^
                   source.ts meta.var.expr.ts meta.arrow.ts meta.block.ts
>    return param1;
 ^^^^
 source.ts meta.var.expr.ts meta.arrow.ts meta.block.ts
     ^^^^^^
     source.ts meta.var.expr.ts meta.arrow.ts meta.block.ts keyword.control.flow.ts
           ^
           source.ts meta.var.expr.ts meta.arrow.ts meta.block.ts
            ^^^^^^
            source.ts meta.var.expr.ts meta.arrow.ts meta.block.ts variable.other.readwrite.ts
                  ^
                  source.ts meta.var.expr.ts meta.arrow.ts meta.block.ts punctuation.terminator.statement.ts
                   ^^
                   source.ts meta.var.expr.ts meta.arrow.ts meta.block.ts
>};
 ^
 source.ts meta.var.expr.ts meta.arrow.ts meta.block.ts punctuation.definition.block.ts
  ^
  source.ts punctuation.terminator.statement.ts
   ^^
   source.ts
>const method2 = async <T>(
 ^^^^^
 source.ts meta.var.expr.ts storage.type.ts
      ^
      source.ts meta.var.expr.ts
       ^^^^^^^
       source.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.definition.variable.ts entity.name.function.ts
              ^
              source.ts meta.var.expr.ts meta.var-single-variable.expr.ts
               ^
               source.ts meta.var.expr.ts keyword.operator.assignment.ts
                ^
                source.ts meta.var.expr.ts
                 ^^^^^
                 source.ts meta.var.expr.ts storage.modifier.async.ts
                      ^
                      source.ts meta.var.expr.ts
                       ^
                       source.ts meta.var.expr.ts meta.type.parameters.ts punctuation.definition.typeparameters.begin.ts
                        ^
                        source.ts meta.var.expr.ts meta.type.parameters.ts entity.name.type.ts
                         ^
                         source.ts meta.var.expr.ts meta.type.parameters.ts punctuation.definition.typeparameters.end.ts
                          ^
                          source.ts meta.var.expr.ts meta.brace.round.ts
                           ^^
                           source.ts meta.var.expr.ts
>    param1: T,
 ^^^^
 source.ts meta.var.expr.ts
     ^^^^^^
     source.ts meta.var.expr.ts variable.parameter.ts
           ^
           source.ts meta.var.expr.ts meta.type.annotation.ts keyword.operator.type.annotation.ts
            ^
            source.ts meta.var.expr.ts meta.type.annotation.ts
             ^
             source.ts meta.var.expr.ts meta.type.annotation.ts entity.name.type.ts
              ^
              source.ts meta.var.expr.ts punctuation.separator.parameter.ts
               ^^
               source.ts meta.var.expr.ts
>    param2: T
 ^^^^
 source.ts meta.var.expr.ts
     ^^^^^^
     source.ts meta.var.expr.ts variable.parameter.ts
           ^
           source.ts meta.var.expr.ts meta.type.annotation.ts keyword.operator.type.annotation.ts
            ^
            source.ts meta.var.expr.ts meta.type.annotation.ts
             ^
             source.ts meta.var.expr.ts meta.type.annotation.ts entity.name.type.ts
              ^
              source.ts meta.var.expr.ts meta.type.annotation.ts
>): Promise<T> => {
 ^
 source.ts meta.var.expr.ts meta.brace.round.ts
  ^
  source.ts meta.var.expr.ts meta.arrow.ts meta.return.type.arrow.ts keyword.operator.type.annotation.ts
   ^
   source.ts meta.var.expr.ts meta.arrow.ts meta.return.type.arrow.ts
    ^^^^^^^
    source.ts meta.var.expr.ts meta.arrow.ts meta.return.type.arrow.ts entity.name.type.ts
           ^
           source.ts meta.var.expr.ts meta.arrow.ts meta.return.type.arrow.ts meta.type.parameters.ts punctuation.definition.typeparameters.begin.ts
            ^
            source.ts meta.var.expr.ts meta.arrow.ts meta.return.type.arrow.ts meta.type.parameters.ts entity.name.type.ts
             ^
             source.ts meta.var.expr.ts meta.arrow.ts meta.return.type.arrow.ts meta.type.parameters.ts punctuation.definition.typeparameters.end.ts
              ^
              source.ts meta.var.expr.ts meta.arrow.ts meta.return.type.arrow.ts
               ^^
               source.ts meta.var.expr.ts meta.arrow.ts storage.type.function.arrow.ts
                 ^
                 source.ts meta.var.expr.ts meta.arrow.ts
                  ^
                  source.ts meta.var.expr.ts meta.arrow.ts meta.block.ts punctuation.definition.block.ts
                   ^^
                   source.ts meta.var.expr.ts meta.arrow.ts meta.block.ts
>    return param1;
 ^^^^
 source.ts meta.var.expr.ts meta.arrow.ts meta.block.ts
     ^^^^^^
     source.ts meta.var.expr.ts meta.arrow.ts meta.block.ts keyword.control.flow.ts
           ^
           source.ts meta.var.expr.ts meta.arrow.ts meta.block.ts
            ^^^^^^
            source.ts meta.var.expr.ts meta.arrow.ts meta.block.ts variable.other.readwrite.ts
                  ^
                  source.ts meta.var.expr.ts meta.arrow.ts meta.block.ts punctuation.terminator.statement.ts
                   ^^
                   source.ts meta.var.expr.ts meta.arrow.ts meta.block.ts
>};
 ^
 source.ts meta.var.expr.ts meta.arrow.ts meta.block.ts punctuation.definition.block.ts
  ^
  source.ts punctuation.terminator.statement.ts