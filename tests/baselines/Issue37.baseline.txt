original file
-----------------------------------
//Test For Scopes

^^import ^^* ^^as req ^^from "./Required"
import { Scale } from "./scale";

^^if (object.^^instanceof(ClassNew)) {
}

^^class ^^class1(){
	^^static ^^functioname(){

	}
}

^^export ^^class className(){
	^^private ^^state = { }
}

^^void ^^newFunctionName(){

	^^var c = a ^^+ b;

	^^switch (someNum) {
		^^case 1: break;
		^^case 2: break;
		^^default: break;
	} 

}

/**
 * Verify comments
 */

^^module M {
    ^^export function myFun(x: number) {
        return x;
    }
}

var m: ^^typeof M = M;

var adder = ^^new Adder(3, 4);
^^delete (adder)

var s = typeof {}git 
interface I {}
var j: I = {}


^^module ^^Body {
    ^^export ^^class ^^Cell {
        ^^public ^^parent: ^^Cell;

        ^^constructor(^^parent: ^^Cell) {
            ^^this.parent = ^^parent;
            if (^^typeof ^^parent ^^=== ^^'object' || ^^parent ^^instanceof ^^Error) {
            	^^
            }
        }
    }
}

/*
^^
  End of file

*/
-----------------------------------

>//Test For Scopes
 ^^
 source.ts comment.line.double-slash.ts punctuation.definition.comment.ts
   ^^^^^^^^^^^^^^^
   source.ts comment.line.double-slash.ts
>
 ^
 source.ts
>import * as req from "./Required"
 ^^^^^^
 source.ts keyword.control.import.include.ts
       ^
       source.ts
        ^
        source.ts keyword.operator.arithmetic.ts
         ^
         source.ts
          ^^
          source.ts keyword.others.ts
            ^^^^^
            source.ts
                 ^^^^
                 source.ts keyword.control.import.include.ts
                     ^
                     source.ts
                      ^
                      source.ts string.double.ts
                       ^^^^^^^^^^
                       source.ts string.double.ts
                                 ^
                                 source.ts string.double.ts
>import { Scale } from "./scale";
 ^^^^^^
 source.ts keyword.control.import.include.ts
       ^
       source.ts
        ^
        source.ts meta.block.ts meta.brace.curly.ts
         ^^^^^^^
         source.ts meta.block.ts
                ^
                source.ts meta.block.ts meta.brace.curly.ts
                 ^
                 source.ts
                  ^^^^
                  source.ts keyword.control.import.include.ts
                      ^
                      source.ts
                       ^
                       source.ts string.double.ts
                        ^^^^^^^
                        source.ts string.double.ts
                               ^
                               source.ts string.double.ts
                                ^^
                                source.ts
>
 ^
 source.ts
>if (object.instanceof(ClassNew)) {
 ^^
 source.ts keyword.control.ts
   ^
   source.ts
    ^
    source.ts meta.brace.paren.ts
     ^^^^^^^
     source.ts
            ^^^^^^^^^^
            source.ts keyword.others.ts
                      ^
                      source.ts meta.brace.paren.ts
                       ^^^^^^^^
                       source.ts
                               ^
                               source.ts meta.brace.paren.ts
                                ^
                                source.ts meta.brace.paren.ts
                                 ^
                                 source.ts
                                  ^
                                  source.ts meta.block.ts meta.brace.curly.ts
>}
 ^
 source.ts meta.block.ts meta.brace.curly.ts
>
 ^
 source.ts
>class class1(){
 ^^^^^
 source.ts meta.declaration.object.ts storage.type.ts
      ^
      source.ts meta.declaration.object.ts
       ^^^^^^
       source.ts meta.declaration.object.ts meta.object.name.ts entity.name.class.ts
             ^^
             source.ts meta.declaration.object.ts
               ^
               source.ts meta.declaration.object.ts meta.object.body.ts meta.brace.curly.ts
>	static functioname(){
 ^
 source.ts meta.declaration.object.ts meta.object.body.ts
  ^^^^^^
  source.ts meta.declaration.object.ts meta.object.body.ts keyword.other.ts
        ^
        source.ts meta.declaration.object.ts meta.object.body.ts
         ^^^^^^^^^^^
         source.ts meta.declaration.object.ts meta.object.body.ts meta.method.declaration.ts entity.name.function.ts
                    ^
                    source.ts meta.declaration.object.ts meta.object.body.ts meta.method.declaration.ts meta.function.type.parameter.ts meta.brace.round.ts
                     ^
                     source.ts meta.declaration.object.ts meta.object.body.ts meta.method.declaration.ts meta.function.type.parameter.ts meta.brace.round.ts
                      ^
                      source.ts meta.declaration.object.ts meta.object.body.ts meta.method.declaration.ts meta.decl.block.ts meta.brace.curly.ts
>
 ^
 source.ts meta.declaration.object.ts meta.object.body.ts meta.method.declaration.ts meta.decl.block.ts
>	}
 ^
 source.ts meta.declaration.object.ts meta.object.body.ts meta.method.declaration.ts meta.decl.block.ts
  ^
  source.ts meta.declaration.object.ts meta.object.body.ts meta.method.declaration.ts meta.decl.block.ts meta.brace.curly.ts
>}
 ^
 source.ts meta.declaration.object.ts meta.object.body.ts meta.brace.curly.ts
>
 ^
 source.ts
>export class className(){
 ^^^^^^
 source.ts meta.declaration.object.ts storage.type.ts
       ^
       source.ts meta.declaration.object.ts
        ^^^^^
        source.ts meta.declaration.object.ts storage.type.ts
             ^
             source.ts meta.declaration.object.ts
              ^^^^^^^^^
              source.ts meta.declaration.object.ts meta.object.name.ts entity.name.class.ts
                       ^^
                       source.ts meta.declaration.object.ts
                         ^
                         source.ts meta.declaration.object.ts meta.object.body.ts meta.brace.curly.ts
>	private state = { }
 ^
 source.ts meta.declaration.object.ts meta.object.body.ts
  ^^^^^^^
  source.ts meta.declaration.object.ts meta.object.body.ts storage.modifier.ts
         ^
         source.ts meta.declaration.object.ts meta.object.body.ts meta.field.declaration.ts
          ^^^^^
          source.ts meta.declaration.object.ts meta.object.body.ts meta.field.declaration.ts variable.ts
               ^
               source.ts meta.declaration.object.ts meta.object.body.ts meta.field.declaration.ts
                ^
                source.ts meta.declaration.object.ts meta.object.body.ts meta.field.declaration.ts keyword.operator.comparison.ts
                 ^
                 source.ts meta.declaration.object.ts meta.object.body.ts meta.field.declaration.ts
                  ^
                  source.ts meta.declaration.object.ts meta.object.body.ts meta.field.declaration.ts meta.block.ts meta.brace.curly.ts
                   ^
                   source.ts meta.declaration.object.ts meta.object.body.ts meta.field.declaration.ts meta.block.ts
                    ^
                    source.ts meta.declaration.object.ts meta.object.body.ts meta.field.declaration.ts meta.block.ts meta.brace.curly.ts
>}
 ^
 source.ts meta.declaration.object.ts meta.object.body.ts meta.brace.curly.ts
>
 ^
 source.ts
>void newFunctionName(){
 ^^^^
 source.ts storage.type.ts
     ^^^^^^^^^^^^^^^^
     source.ts
                     ^
                     source.ts meta.brace.paren.ts
                      ^
                      source.ts meta.brace.paren.ts
                       ^
                       source.ts meta.block.ts meta.brace.curly.ts
>
 ^
 source.ts meta.block.ts
>	var c = a + b;
 ^
 source.ts meta.block.ts meta.var.expr.ts
  ^^^
  source.ts meta.block.ts meta.var.expr.ts storage.type.ts
     ^
     source.ts meta.block.ts meta.var.expr.ts
      ^
      source.ts meta.block.ts meta.var.expr.ts meta.var-single-variable.expr.ts variable.ts
       ^^
       source.ts meta.block.ts meta.var.expr.ts meta.var-single-variable.expr.ts
         ^^^
         source.ts meta.block.ts meta.var.expr.ts meta.var-single-variable.expr.ts
            ^
            source.ts meta.block.ts meta.var.expr.ts meta.var-single-variable.expr.ts keyword.operator.arithmetic.ts
             ^^
             source.ts meta.block.ts meta.var.expr.ts meta.var-single-variable.expr.ts
               ^^
               source.ts meta.block.ts
>
 ^
 source.ts meta.block.ts
>	switch (someNum) {
 ^
 source.ts meta.block.ts
  ^^^^^^
  source.ts meta.block.ts switch-statement.expr.ts switch-expression.expr.ts keyword.control.ts
        ^^
        source.ts meta.block.ts switch-statement.expr.ts switch-expression.expr.ts
          ^^^^^^^
          source.ts meta.block.ts switch-statement.expr.ts switch-expression.expr.ts
                 ^
                 source.ts meta.block.ts switch-statement.expr.ts switch-expression.expr.ts
                  ^
                  source.ts meta.block.ts switch-statement.expr.ts
                   ^
                   source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
>		case 1: break;
 ^^
 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
   ^^^^
   source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts keyword.control.ts
       ^
       source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts
        ^
        source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts constant.numeric.decimal.ts
         ^
         source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts
          ^
          source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
           ^^^^^
           source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts keyword.control.ts
                ^^
                source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
>		case 2: break;
 ^^
 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
   ^^^^
   source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts keyword.control.ts
       ^
       source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts
        ^
        source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts constant.numeric.decimal.ts
         ^
         source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts
          ^
          source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
           ^^^^^
           source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts keyword.control.ts
                ^^
                source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
>		default: break;
 ^^
 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
   ^^^^^^^
   source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts keyword.control.ts
          ^
          source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts case-clause.expr.ts
           ^
           source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
            ^^^^^
            source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts keyword.control.ts
                 ^^
                 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
>	} 
 ^
 source.ts meta.block.ts switch-statement.expr.ts switch-block.expr.ts
  ^
  source.ts meta.block.ts switch-statement.expr.ts
   ^^
   source.ts meta.block.ts
>
 ^
 source.ts meta.block.ts
>}
 ^
 source.ts meta.block.ts meta.brace.curly.ts
>
 ^
 source.ts
>/**
 ^^^
 source.ts comment.block.documentation.ts punctuation.definition.comment.ts
> * Verify comments
 ^^^^^^^^^^^^^^^^^^^
 source.ts comment.block.documentation.ts
> */
 ^
 source.ts comment.block.documentation.ts
  ^^
  source.ts comment.block.documentation.ts punctuation.definition.comment.ts
>
 ^
 source.ts
>module M {
 ^^^^^^
 source.ts storage.type.ts
       ^^^
       source.ts
          ^
          source.ts meta.block.ts meta.brace.curly.ts
>    export function myFun(x: number) {
 ^^^^
 source.ts meta.block.ts
     ^^^^^^
     source.ts meta.block.ts meta.function.ts storage.type.ts
           ^
           source.ts meta.block.ts meta.function.ts
            ^^^^^^^^
            source.ts meta.block.ts meta.function.ts storage.type.function.ts
                    ^
                    source.ts meta.block.ts meta.function.ts
                     ^^^^^
                     source.ts meta.block.ts meta.function.ts entity.name.function.ts
                          ^
                          source.ts meta.block.ts meta.function.ts meta.function.type.parameter.ts meta.brace.round.ts
                           ^
                           source.ts meta.block.ts meta.function.ts meta.function.type.parameter.ts parameter.name.ts variable.parameter.ts
                            ^
                            source.ts meta.block.ts meta.function.ts meta.function.type.parameter.ts meta.type.annotation.ts
                             ^
                             source.ts meta.block.ts meta.function.ts meta.function.type.parameter.ts meta.type.annotation.ts
                              ^^^^^^
                              source.ts meta.block.ts meta.function.ts meta.function.type.parameter.ts meta.type.annotation.ts meta.type.primitive.ts support.type.ts
                                    ^
                                    source.ts meta.block.ts meta.function.ts meta.function.type.parameter.ts meta.brace.round.ts
                                     ^
                                     source.ts meta.block.ts meta.function.ts
                                      ^
                                      source.ts meta.block.ts meta.function.ts meta.decl.block.ts meta.brace.curly.ts
>        return x;
 ^^^^^^^^
 source.ts meta.block.ts meta.function.ts meta.decl.block.ts
         ^^^^^^
         source.ts meta.block.ts meta.function.ts meta.decl.block.ts keyword.control.ts
               ^^^^
               source.ts meta.block.ts meta.function.ts meta.decl.block.ts
>    }
 ^^^^
 source.ts meta.block.ts meta.function.ts meta.decl.block.ts
     ^
     source.ts meta.block.ts meta.function.ts meta.decl.block.ts meta.brace.curly.ts
>}
 ^
 source.ts meta.block.ts meta.brace.curly.ts
>
 ^
 source.ts
>var m: typeof M = M;
 ^^^
 source.ts meta.var.expr.ts storage.type.ts
    ^
    source.ts meta.var.expr.ts
     ^
     source.ts meta.var.expr.ts meta.var-single-variable.expr.ts variable.ts
      ^
      source.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.type.annotation.ts
       ^
       source.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.type.annotation.ts
        ^^^^^^
        source.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.type.annotation.ts keyword.others.ts
              ^
              source.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.type.annotation.ts
               ^
               source.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.type.annotation.ts meta.type.name.ts
                ^
                source.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.type.annotation.ts
                 ^
                 source.ts meta.var.expr.ts meta.var-single-variable.expr.ts keyword.operator.comparison.ts
                  ^^
                  source.ts meta.var.expr.ts meta.var-single-variable.expr.ts
                    ^^
                    source.ts
>
 ^
 source.ts
>var adder = new Adder(3, 4);
 ^^^
 source.ts meta.var.expr.ts storage.type.ts
    ^
    source.ts meta.var.expr.ts
     ^^^^^
     source.ts meta.var.expr.ts meta.var-single-variable.expr.ts variable.ts
          ^^
          source.ts meta.var.expr.ts meta.var-single-variable.expr.ts
            ^
            source.ts meta.var.expr.ts meta.var-single-variable.expr.ts
             ^^^
             source.ts meta.var.expr.ts meta.var-single-variable.expr.ts new.expr.ts keyword.others.ts
                ^
                source.ts meta.var.expr.ts meta.var-single-variable.expr.ts new.expr.ts
                 ^^^^^
                 source.ts meta.var.expr.ts meta.var-single-variable.expr.ts new.expr.ts meta.type.name.ts
                      ^
                      source.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.brace.paren.ts
                       ^
                       source.ts meta.var.expr.ts meta.var-single-variable.expr.ts constant.numeric.decimal.ts
                        ^^
                        source.ts meta.var.expr.ts meta.var-single-variable.expr.ts
                          ^
                          source.ts meta.var.expr.ts meta.var-single-variable.expr.ts constant.numeric.decimal.ts
                           ^
                           source.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.brace.paren.ts
                            ^^
                            source.ts
>delete (adder)
 ^^^^^^
 source.ts keyword.others.ts
       ^
       source.ts
        ^
        source.ts meta.brace.paren.ts
         ^^^^^
         source.ts
              ^
              source.ts meta.brace.paren.ts
>
 ^
 source.ts
>var s = typeof {}git 
 ^^^
 source.ts meta.var.expr.ts storage.type.ts
    ^
    source.ts meta.var.expr.ts
     ^
     source.ts meta.var.expr.ts meta.var-single-variable.expr.ts variable.ts
      ^^
      source.ts meta.var.expr.ts meta.var-single-variable.expr.ts
        ^
        source.ts meta.var.expr.ts meta.var-single-variable.expr.ts
         ^^^^^^
         source.ts meta.var.expr.ts meta.var-single-variable.expr.ts keyword.others.ts
               ^
               source.ts meta.var.expr.ts meta.var-single-variable.expr.ts
                ^
                source.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.block.ts meta.brace.curly.ts
                 ^
                 source.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.block.ts meta.brace.curly.ts
                  ^^^^
                  source.ts meta.var.expr.ts meta.var-single-variable.expr.ts
>interface I {}
 ^^^^^^^^^
 source.ts meta.declaration.object.ts storage.type.ts
          ^
          source.ts meta.declaration.object.ts
           ^
           source.ts meta.declaration.object.ts meta.object.name.ts entity.name.class.ts
            ^
            source.ts meta.declaration.object.ts
             ^
             source.ts meta.declaration.object.ts meta.object.body.ts meta.brace.curly.ts
              ^
              source.ts meta.declaration.object.ts meta.object.body.ts meta.brace.curly.ts
>var j: I = {}
 ^^^
 source.ts meta.var.expr.ts storage.type.ts
    ^
    source.ts meta.var.expr.ts
     ^
     source.ts meta.var.expr.ts meta.var-single-variable.expr.ts variable.ts
      ^
      source.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.type.annotation.ts
       ^
       source.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.type.annotation.ts
        ^
        source.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.type.annotation.ts meta.type.name.ts
         ^
         source.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.type.annotation.ts
          ^
          source.ts meta.var.expr.ts meta.var-single-variable.expr.ts keyword.operator.comparison.ts
           ^
           source.ts meta.var.expr.ts meta.var-single-variable.expr.ts
            ^
            source.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.block.ts meta.brace.curly.ts
             ^
             source.ts meta.var.expr.ts meta.var-single-variable.expr.ts meta.block.ts meta.brace.curly.ts
>
 ^
 source.ts
>
 ^
 source.ts
>module Body {
 ^^^^^^
 source.ts storage.type.ts
       ^^^^^^
       source.ts
             ^
             source.ts meta.block.ts meta.brace.curly.ts
>    export class Cell {
 ^^^^
 source.ts meta.block.ts
     ^^^^^^
     source.ts meta.block.ts meta.declaration.object.ts storage.type.ts
           ^
           source.ts meta.block.ts meta.declaration.object.ts
            ^^^^^
            source.ts meta.block.ts meta.declaration.object.ts storage.type.ts
                 ^
                 source.ts meta.block.ts meta.declaration.object.ts
                  ^^^^
                  source.ts meta.block.ts meta.declaration.object.ts meta.object.name.ts entity.name.class.ts
                      ^
                      source.ts meta.block.ts meta.declaration.object.ts
                       ^
                       source.ts meta.block.ts meta.declaration.object.ts meta.object.body.ts meta.brace.curly.ts
>        public parent: Cell;
 ^^^^^^^^
 source.ts meta.block.ts meta.declaration.object.ts meta.object.body.ts
         ^^^^^^
         source.ts meta.block.ts meta.declaration.object.ts meta.object.body.ts storage.modifier.ts
               ^
               source.ts meta.block.ts meta.declaration.object.ts meta.object.body.ts meta.field.declaration.ts
                ^^^^^^
                source.ts meta.block.ts meta.declaration.object.ts meta.object.body.ts meta.field.declaration.ts variable.ts
                      ^^^^^^
                      source.ts meta.block.ts meta.declaration.object.ts meta.object.body.ts meta.field.declaration.ts
                            ^^
                            source.ts meta.block.ts meta.declaration.object.ts meta.object.body.ts
>
 ^
 source.ts meta.block.ts meta.declaration.object.ts meta.object.body.ts
>        constructor(parent: Cell) {
 ^^^^^^^^
 source.ts meta.block.ts meta.declaration.object.ts meta.object.body.ts
         ^^^^^^^^^^^
         source.ts meta.block.ts meta.declaration.object.ts meta.object.body.ts meta.method.declaration.ts storage.type.ts
                    ^
                    source.ts meta.block.ts meta.declaration.object.ts meta.object.body.ts meta.method.declaration.ts meta.function.type.parameter.ts meta.brace.round.ts
                     ^^^^^^
                     source.ts meta.block.ts meta.declaration.object.ts meta.object.body.ts meta.method.declaration.ts meta.function.type.parameter.ts parameter.name.ts variable.parameter.ts
                           ^
                           source.ts meta.block.ts meta.declaration.object.ts meta.object.body.ts meta.method.declaration.ts meta.function.type.parameter.ts meta.type.annotation.ts
                            ^
                            source.ts meta.block.ts meta.declaration.object.ts meta.object.body.ts meta.method.declaration.ts meta.function.type.parameter.ts meta.type.annotation.ts
                             ^^^^
                             source.ts meta.block.ts meta.declaration.object.ts meta.object.body.ts meta.method.declaration.ts meta.function.type.parameter.ts meta.type.annotation.ts meta.type.name.ts
                                 ^
                                 source.ts meta.block.ts meta.declaration.object.ts meta.object.body.ts meta.method.declaration.ts meta.function.type.parameter.ts meta.brace.round.ts
                                  ^
                                  source.ts meta.block.ts meta.declaration.object.ts meta.object.body.ts meta.method.declaration.ts
                                   ^
                                   source.ts meta.block.ts meta.declaration.object.ts meta.object.body.ts meta.method.declaration.ts meta.decl.block.ts meta.brace.curly.ts
>            this.parent = parent;
 ^^^^^^^^^^^^
 source.ts meta.block.ts meta.declaration.object.ts meta.object.body.ts meta.method.declaration.ts meta.decl.block.ts
             ^^^^
             source.ts meta.block.ts meta.declaration.object.ts meta.object.body.ts meta.method.declaration.ts meta.decl.block.ts constant.language.this.ts
                 ^^^^^^^^
                 source.ts meta.block.ts meta.declaration.object.ts meta.object.body.ts meta.method.declaration.ts meta.decl.block.ts
                         ^
                         source.ts meta.block.ts meta.declaration.object.ts meta.object.body.ts meta.method.declaration.ts meta.decl.block.ts keyword.operator.comparison.ts
                          ^^^^^^^^^
                          source.ts meta.block.ts meta.declaration.object.ts meta.object.body.ts meta.method.declaration.ts meta.decl.block.ts
>            if (typeof parent === 'object' || parent instanceof Error) {
 ^^^^^^^^^^^^
 source.ts meta.block.ts meta.declaration.object.ts meta.object.body.ts meta.method.declaration.ts meta.decl.block.ts
             ^^
             source.ts meta.block.ts meta.declaration.object.ts meta.object.body.ts meta.method.declaration.ts meta.decl.block.ts keyword.control.ts
               ^
               source.ts meta.block.ts meta.declaration.object.ts meta.object.body.ts meta.method.declaration.ts meta.decl.block.ts
                ^
                source.ts meta.block.ts meta.declaration.object.ts meta.object.body.ts meta.method.declaration.ts meta.decl.block.ts meta.brace.paren.ts
                 ^^^^^^
                 source.ts meta.block.ts meta.declaration.object.ts meta.object.body.ts meta.method.declaration.ts meta.decl.block.ts keyword.others.ts
                       ^^^^^^^^
                       source.ts meta.block.ts meta.declaration.object.ts meta.object.body.ts meta.method.declaration.ts meta.decl.block.ts
                               ^^^
                               source.ts meta.block.ts meta.declaration.object.ts meta.object.body.ts meta.method.declaration.ts meta.decl.block.ts keyword.operator.comparison.ts
                                  ^
                                  source.ts meta.block.ts meta.declaration.object.ts meta.object.body.ts meta.method.declaration.ts meta.decl.block.ts
                                   ^
                                   source.ts meta.block.ts meta.declaration.object.ts meta.object.body.ts meta.method.declaration.ts meta.decl.block.ts string.single.ts
                                    ^^^^^^
                                    source.ts meta.block.ts meta.declaration.object.ts meta.object.body.ts meta.method.declaration.ts meta.decl.block.ts string.single.ts
                                          ^
                                          source.ts meta.block.ts meta.declaration.object.ts meta.object.body.ts meta.method.declaration.ts meta.decl.block.ts string.single.ts
                                           ^
                                           source.ts meta.block.ts meta.declaration.object.ts meta.object.body.ts meta.method.declaration.ts meta.decl.block.ts
                                            ^^
                                            source.ts meta.block.ts meta.declaration.object.ts meta.object.body.ts meta.method.declaration.ts meta.decl.block.ts keyword.operator.arithmetic.ts
                                              ^^^^^^^^
                                              source.ts meta.block.ts meta.declaration.object.ts meta.object.body.ts meta.method.declaration.ts meta.decl.block.ts
                                                      ^^^^^^^^^^
                                                      source.ts meta.block.ts meta.declaration.object.ts meta.object.body.ts meta.method.declaration.ts meta.decl.block.ts keyword.others.ts
                                                                ^^^^^^
                                                                source.ts meta.block.ts meta.declaration.object.ts meta.object.body.ts meta.method.declaration.ts meta.decl.block.ts
                                                                      ^
                                                                      source.ts meta.block.ts meta.declaration.object.ts meta.object.body.ts meta.method.declaration.ts meta.decl.block.ts meta.brace.paren.ts
                                                                       ^
                                                                       source.ts meta.block.ts meta.declaration.object.ts meta.object.body.ts meta.method.declaration.ts meta.decl.block.ts
                                                                        ^
                                                                        source.ts meta.block.ts meta.declaration.object.ts meta.object.body.ts meta.method.declaration.ts meta.decl.block.ts meta.block.ts meta.brace.curly.ts
>            	
 ^^^^^^^^^^^^^^
 source.ts meta.block.ts meta.declaration.object.ts meta.object.body.ts meta.method.declaration.ts meta.decl.block.ts meta.block.ts
>            }
 ^^^^^^^^^^^^
 source.ts meta.block.ts meta.declaration.object.ts meta.object.body.ts meta.method.declaration.ts meta.decl.block.ts meta.block.ts
             ^
             source.ts meta.block.ts meta.declaration.object.ts meta.object.body.ts meta.method.declaration.ts meta.decl.block.ts meta.block.ts meta.brace.curly.ts
>        }
 ^^^^^^^^
 source.ts meta.block.ts meta.declaration.object.ts meta.object.body.ts meta.method.declaration.ts meta.decl.block.ts
         ^
         source.ts meta.block.ts meta.declaration.object.ts meta.object.body.ts meta.method.declaration.ts meta.decl.block.ts meta.brace.curly.ts
>    }
 ^^^^
 source.ts meta.block.ts meta.declaration.object.ts meta.object.body.ts
     ^
     source.ts meta.block.ts meta.declaration.object.ts meta.object.body.ts meta.brace.curly.ts
>}
 ^
 source.ts meta.block.ts meta.brace.curly.ts
>
 ^
 source.ts
>/*
 ^^
 source.ts comment.block.ts punctuation.definition.comment.ts
>
 ^
 source.ts comment.block.ts
>  End of file
 ^^^^^^^^^^^^^^
 source.ts comment.block.ts
>
 ^
 source.ts comment.block.ts
>*/
 ^^
 source.ts comment.block.ts punctuation.definition.comment.ts