<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>fileTypes</key>
	<array>
		<string>tsx</string>
	</array>
	<key>name</key>
	<string>TypeScriptReact</string>
	<key>patterns</key>
	<array>
		<dict>
			<key>include</key>
			<string>#statements</string>
		</dict>
	</array>
	<key>repository</key>
	<dict>
		<key>access-modifier</key>
		<dict>
			<key>match</key>
			<string>(?&lt;!\.|\$)\b(public|protected|private|readonly)\b(?!\$)</string>
			<key>name</key>
			<string>storage.modifier.tsx</string>
		</dict>
		<key>after-operator-block</key>
		<dict>
			<key>begin</key>
			<string>(?&lt;=[=(:,\[?+!]|await|return|yield|throw|in|of|typeof|&amp;&amp;|\|\||\*)\s*(\{)</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.block.tsx</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\}</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.block.tsx</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.object-literal.tsx</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#object-member</string>
				</dict>
			</array>
		</dict>
		<key>array-binding-element</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#object-binding-pattern</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#array-binding-pattern</string>
				</dict>
				<dict>
					<key>match</key>
					<string>([_$[:alpha:]][_$[:alnum:]]*)</string>
					<key>name</key>
					<string>variable.other.readwrite.tsx</string>
				</dict>
				<dict>
					<key>match</key>
					<string>,</string>
					<key>name</key>
					<string>meta.delimiter.object.comma.tsx</string>
				</dict>
			</array>
		</dict>
		<key>array-binding-pattern</key>
		<dict>
			<key>begin</key>
			<string>\[</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.binding-pattern.array.tsx</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\]</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.binding-pattern.array.tsx</string>
				</dict>
			</dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#array-binding-element</string>
				</dict>
			</array>
		</dict>
		<key>array-literal</key>
		<dict>
			<key>begin</key>
			<string>\[</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>meta.brace.square.tsx</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\]</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>meta.brace.square.tsx</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.array.literal.tsx</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#expression</string>
				</dict>
			</array>
		</dict>
		<key>arrow-function</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.modifier.async.tsx</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?&lt;!\.|\$)(\basync)(?=\s*[&lt;(])</string>
					<key>name</key>
					<string>meta.arrow.tsx</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>variable.parameter.tsx</string>
						</dict>
					</dict>
					<key>match</key>
					<string>([_$[:alpha:]][_$[:alnum:]]*)\s*(?==&gt;)</string>
					<key>name</key>
					<string>meta.arrow.tsx</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?x)(?&lt;=return|throw|yield|await|async|[=(\[,:&gt;*])\s*(?=\([^()]*(\([^()]*\))*[^()]*(\([^()]*\))*[^()]*\)(\s*:\s*(.)*)?\s*=&gt;)</string>
					<key>end</key>
					<string>(?==&gt;)</string>
					<key>name</key>
					<string>meta.arrow.tsx</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#comment</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#function-parameters</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#arrow-return-type</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>=&gt;</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>storage.type.function.arrow.tsx</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?&lt;=\})|((?!\{)(?=\S))</string>
					<key>name</key>
					<string>meta.arrow.tsx</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#decl-block</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#expression</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>arrow-return-type</key>
		<dict>
			<key>begin</key>
			<string>(?&lt;=\))\s*:</string>
			<key>end</key>
			<string>(?&lt;!:)((?=$)|(?==&gt;|;|//))</string>
			<key>name</key>
			<string>meta.return.type.arrow.tsx</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#type-predicate-operator</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type</string>
				</dict>
			</array>
		</dict>
		<key>boolean-literal</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>(?&lt;!\.|\$)\btrue\b(?!\$)</string>
					<key>name</key>
					<string>constant.language.boolean.true.tsx</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;!\.|\$)\bfalse\b(?!\$)</string>
					<key>name</key>
					<string>constant.language.boolean.false.tsx</string>
				</dict>
			</array>
		</dict>
		<key>case-clause</key>
		<dict>
			<key>begin</key>
			<string>(?&lt;!\.|\$)\b(case|default(?=:))\b(?!\$)</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.switch.tsx</string>
				</dict>
			</dict>
			<key>end</key>
			<string>:</string>
			<key>name</key>
			<string>case-clause.expr.tsx</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#expression</string>
				</dict>
			</array>
		</dict>
		<key>class-or-interface-body</key>
		<dict>
			<key>begin</key>
			<string>\{</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.block.tsx</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\}</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.block.tsx</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.object.body.tsx</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#string</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#decorator</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#field-declaration</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#method-declaration</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#indexer-declaration</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type-annotation</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#variable-initializer</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#access-modifier</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#static-modifier</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#property-accessor</string>
				</dict>
			</array>
		</dict>
		<key>class-or-interface-declaration</key>
		<dict>
			<key>begin</key>
			<string>(?&lt;!\.|\$)\b(?:(export)\s+)?\b(?:(abstract)\s+)?\b(?:(class)|(interface))\b</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.export.tsx</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>storage.modifier.tsx</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>storage.type.class.tsx</string>
				</dict>
				<key>4</key>
				<dict>
					<key>name</key>
					<string>storage.type.interface.tsx</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?&lt;=\})</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.block.tsx</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.declaration.object.tsx</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#class-or-interface-heritage</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#class-or-interface-name</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type-parameters</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#class-or-interface-body</string>
				</dict>
			</array>
		</dict>
		<key>class-or-interface-heritage</key>
		<dict>
			<key>begin</key>
			<string>(?&lt;!\.|\$)(?:\b(extends|implements)\b)(?!\$)</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.modifier.tsx</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?=\{)</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.block.tsx</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.object.heritage.tsx</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#class-or-interface-heritage</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type-parameters</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#class-or-interface-heritage-type</string>
				</dict>
			</array>
		</dict>
		<key>class-or-interface-heritage-type</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>entity.name.type.module.tsx</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.accessor.tsx</string>
						</dict>
					</dict>
					<key>match</key>
					<string>([_$[:alpha:]][_$[:alnum:]]*)\s*(\.)</string>
					<key>name</key>
					<string>meta.object.heritage.parent.tsx</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>entity.other.inherited-class.tsx</string>
						</dict>
					</dict>
					<key>match</key>
					<string>([_$[:alpha:]][_$[:alnum:]]*)</string>
					<key>name</key>
					<string>meta.object.heritage.parent.tsx</string>
				</dict>
			</array>
		</dict>
		<key>class-or-interface-name</key>
		<dict>
			<key>captures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>entity.name.class.tsx</string>
				</dict>
			</dict>
			<key>match</key>
			<string>[_$[:alpha:]][_$[:alnum:]]*</string>
			<key>name</key>
			<string>meta.object.name.tsx</string>
		</dict>
		<key>comment</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>/\*\*(?!/)</string>
					<key>captures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.tsx</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\*/</string>
					<key>name</key>
					<string>comment.block.documentation.tsx</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#docblock</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>/\*</string>
					<key>captures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.tsx</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\*/</string>
					<key>name</key>
					<string>comment.block.tsx</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>(^[ \t]+)?(?=//)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.whitespace.comment.leading.tsx</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\n</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>comment.line.double-slash.tsx</string>
						</dict>
					</dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>begin</key>
							<string>//</string>
							<key>beginCaptures</key>
							<dict>
								<key>0</key>
								<dict>
									<key>name</key>
									<string>punctuation.definition.comment.tsx</string>
								</dict>
							</dict>
							<key>end</key>
							<string>(?=\n)</string>
							<key>name</key>
							<string>comment.line.double-slash.tsx</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>control-statement</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>(?&lt;!\.|\$)\b(catch|finally|throw|try)\b(?!\$)</string>
					<key>name</key>
					<string>keyword.control.trycatch.tsx</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;!\.|\$)\b(break|continue|do|goto|while)\b(?!\$)</string>
					<key>name</key>
					<string>keyword.control.loop.tsx</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;!\.|\$)\b(await|return)\b(?!\$)</string>
					<key>name</key>
					<string>keyword.control.flow.tsx</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.control.flow.tsx</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.generator.asterisk.tsx</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?&lt;!\.|\$)\b(yield)\b(?!\$)(?:\s*(\*))?</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;!\.|\$)\b(case|default|switch)\b(?!\$)</string>
					<key>name</key>
					<string>keyword.control.switch.tsx</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;!\.|\$)\b(else|if)\b(?!\$)</string>
					<key>name</key>
					<string>keyword.control.conditional.tsx</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;!\.|\$)\b(with)\b(?!\$)</string>
					<key>name</key>
					<string>keyword.control.with.tsx</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;!\.|\$)\b(debugger)\b(?!\$)</string>
					<key>name</key>
					<string>keyword.other.tsx</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;!\.|\$)\b(declare)\b(?!\$)</string>
					<key>name</key>
					<string>storage.modifier.tsx</string>
				</dict>
			</array>
		</dict>
		<key>decl-block</key>
		<dict>
			<key>begin</key>
			<string>\{</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.block.tsx</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\}</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.block.tsx</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.block.tsx</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#statements</string>
				</dict>
			</array>
		</dict>
		<key>declaration</key>
		<dict>
			<key>name</key>
			<string>meta.declaration.tsx</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#decorator</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#var-expr</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#function-declaration</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#class-or-interface-declaration</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type-declaration</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#enum-declaration</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#namespace-declaration</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#import-equals-declaration</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#import-declaration</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#export-declaration</string>
				</dict>
			</array>
		</dict>
		<key>decorator</key>
		<dict>
			<key>begin</key>
			<string>(?&lt;!\.|\$)\@</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.decorator.tsx</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?=\s)</string>
			<key>name</key>
			<string>meta.decorator.tsx</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#expression</string>
				</dict>
			</array>
		</dict>
		<key>destructuring-parameter</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(?&lt;!=|:)\s*(\{)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.binding-pattern.object.tsx</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\}</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.binding-pattern.object.tsx</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.parameter.object-binding-pattern.tsx</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#parameter-object-binding-element</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?&lt;!=|:)\s*(\[)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.binding-pattern.array.tsx</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\]</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.binding-pattern.array.tsx</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.paramter.array-binding-pattern.tsx</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#parameter-array-binding-element</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>destructuring-variable</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(?&lt;!=|:|of|in)\s*(\{)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.binding-pattern.object.tsx</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?=$|[;,}]|(\s+(of|in)\s+))</string>
					<key>name</key>
					<string>meta.object-binding-pattern-variable.tsx</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#variable-initializer</string>
						</dict>
						<dict>
							<key>begin</key>
							<string>\G</string>
							<key>end</key>
							<string>(?!\G)(?=$|[;,=}]|(\s+(of|in)\s+))</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>begin</key>
									<string>\G</string>
									<key>end</key>
									<string>\}</string>
									<key>endCaptures</key>
									<dict>
										<key>0</key>
										<dict>
											<key>name</key>
											<string>punctuation.definition.binding-pattern.object.tsx</string>
										</dict>
									</dict>
									<key>patterns</key>
									<array>
										<dict>
											<key>include</key>
											<string>#object-binding-element</string>
										</dict>
									</array>
								</dict>
								<dict>
									<key>include</key>
									<string>#type-annotation</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#comment</string>
								</dict>
							</array>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?&lt;!=|:|of|in)\s*(\[)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.binding-pattern.array.tsx</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?=$|[;,}]|(\s+(of|in)\s+))</string>
					<key>name</key>
					<string>meta.array-binding-pattern-variable.tsx</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#variable-initializer</string>
						</dict>
						<dict>
							<key>begin</key>
							<string>\G</string>
							<key>end</key>
							<string>(?!\G)(?=$|[;,=}]|(\s+(of|in)\s+))</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>begin</key>
									<string>\G</string>
									<key>end</key>
									<string>\]</string>
									<key>endCaptures</key>
									<dict>
										<key>0</key>
										<dict>
											<key>name</key>
											<string>punctuation.definition.binding-pattern.array.tsx</string>
										</dict>
									</dict>
									<key>patterns</key>
									<array>
										<dict>
											<key>include</key>
											<string>#array-binding-element</string>
										</dict>
									</array>
								</dict>
								<dict>
									<key>include</key>
									<string>#type-annotation</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#comment</string>
								</dict>
							</array>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>docblock</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>(?&lt;!\w)@(abstract|access|alias|arg|argument|async|attribute|augments|author|beta|borrows|bubbes|callback|chainable|class|classdesc|code|config|const|constant|constructor|constructs|copyright|default|defaultvalue|define|deprecated|desc|description|dict|emits|enum|event|example|exports?|extends|extension|extension_for|extensionfor|external|file|fileoverview|final|fires|for|function|global|host|ignore|implements|inherit[Dd]oc|inner|instance|interface|kind|lends|license|listens|main|member|memberof|method|mixex|mixins?|module|name|namespace|nocollapse|nosideeffects|override|overview|package|param|preserve|private|prop|property|protected|public|read[Oo]nly|record|require[ds]|returns?|see|since|static|struct|submodule|summary|template|this|throws|todo|tutorial|type|typedef|unrestricted|uses|var|variation|version|virtual|writeOnce)\b</string>
					<key>name</key>
					<string>storage.type.class.jsdoc</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>other.meta.jsdoc</string>
						</dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>entity.name.type.instance.jsdoc</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>variable.other.jsdoc</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>other.description.jsdoc</string>
						</dict>
					</dict>
					<key>match</key>
					<string>({\b(?:[_$[:alpha:]][_$[:alnum:]]*)\b})\s\b([_$[:alpha:]][_$[:alnum:]]*)\b\s*((?:(?!\*\/).)*)</string>
				</dict>
			</array>
		</dict>
		<key>enum-declaration</key>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.export.tsx</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>storage.modifier.tsx</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>storage.type.enum.tsx</string>
				</dict>
				<key>4</key>
				<dict>
					<key>name</key>
					<string>entity.name.type.enum.tsx</string>
				</dict>
			</dict>
			<key>match</key>
			<string>(?&lt;!\.|\$)(?:(\bexport)\s+)?(?:\b(const)\s+)?\b(enum)\s+([_$[:alpha:]][_$[:alnum:]]*)</string>
			<key>name</key>
			<string>meta.enum.declaration.tsx</string>
		</dict>
		<key>export-declaration</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.control.export.tsx</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.control.as.tsx</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>storage.type.namespace.tsx</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>entity.name.type.module.tsx</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?&lt;!\.|\$)\b(export)\s+(as)\s+(namespace)\s+([_$[:alpha:]][_$[:alnum:]]*)</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?&lt;!\.|\$)\b(export)(?:(?:\s*(=))|(?:\s+(default)\s+))</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.control.export.tsx</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.assignment.tsx</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>keyword.control.default.tsx</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?=;|\bexport\b|\bfunction\b|\bclass\b|\binterface\b|\blet\b|\bvar\b|\bconst\b|\bimport\b|\benum\b|\bnamespace\b|\bmodule\b|\btype\b|\babstract\b|\bdeclare\b|\basync\b|$)</string>
					<key>name</key>
					<string>meta.export.default.tsx</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#expression</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?&lt;!\.|\$)\b(export)(?!(\s*:)|(\$))\b</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>keyword.control.export.tsx</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?=;|\bexport\b|\bfunction\b|\bclass\b|\binterface\b|\blet\b|\bvar\b|\bconst\b|\bimport\b|\benum\b|\bnamespace\b|\bmodule\b|\btype\b|\babstract\b|\bdeclare\b|\basync\b|$)</string>
					<key>name</key>
					<string>meta.export.tsx</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#import-export-declaration</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>expression</key>
		<dict>
			<key>name</key>
			<string>meta.expression.tsx</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#jsx</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#string</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#regex</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#template</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#function-declaration</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#class-or-interface-declaration</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#arrow-function</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#paren-expression</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#ternary-expression</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#new-expr</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#object-literal</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#expression-operator</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#operators</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#function-call</string>
				</dict>
			</array>
		</dict>
		<key>expression-operator</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>(?&lt;!\.|\$)\bdelete\b(?!\$)</string>
					<key>name</key>
					<string>keyword.operator.delete.tsx</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;!\.|\$)\bin\b(?!\$)</string>
					<key>name</key>
					<string>keyword.operator.in.tsx</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;!\.|\$)\bof\b(?!\$)</string>
					<key>name</key>
					<string>keyword.operator.of.tsx</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;!\.|\$)\binstanceof\b(?!\$)</string>
					<key>name</key>
					<string>keyword.operator.instanceof.tsx</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;!\.|\$)\bnew\b(?!\$)</string>
					<key>name</key>
					<string>keyword.operator.new.tsx</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#typeof-operator</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;!\.|\$)\bvoid\b(?!\$)</string>
					<key>name</key>
					<string>keyword.operator.void.tsx</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?&lt;!\.|\$)\bas\b(?!\$)</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>keyword.control.as.tsx</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?=$|[;,})\]])</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#type</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>field-declaration</key>
		<dict>
			<key>begin</key>
			<string>(?&lt;!\()(?:(?&lt;!\.|\$)\b(readonly)\s+)?\s*((?:[_$[:alpha:]][_$[:alnum:]]*)|(?:\'[^']*\')|(?:\"[^"]*\"))\s*(\?\s*)?(?=(=|:))</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.modifier.tsx</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>variable.object.property.tsx</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>keyword.operator.optional.tsx</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?=\}|;|,|$)|(?&lt;=\})</string>
			<key>name</key>
			<string>meta.field.declaration.tsx</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#variable-initializer</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>\G</string>
					<key>end</key>
					<string>(?!\G)(?=[};,=]|$)|(?&lt;=\})</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#type-annotation</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#string</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#comment</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>for-loop</key>
		<dict>
			<key>begin</key>
			<string>(?&lt;!\.|\$)\b(for)\s*(\()</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.loop.tsx</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>meta.brace.round.tsx</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\)</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>meta.brace.round.tsx</string>
				</dict>
			</dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#var-expr</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#expression</string>
				</dict>
			</array>
		</dict>
		<key>function-call</key>
		<dict>
			<key>name</key>
			<string>functioncall.expr.tsx</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>([_$[:alpha:]][_$[:alnum:]]*)\s*(&lt;)(?=[^&lt;&gt;]*(\&lt;[^&lt;&gt;]+\&gt;)*[^&lt;&gt;]*(\&lt;[^&lt;&gt;]+\&gt;)*[^&lt;&gt;]*&gt;\s*\()</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>entity.name.function.tsx</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.typeparameters.begin.tsx</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(&gt;)</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.typeparameters.end.tsx</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.type.parameters.tsx</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#type</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>include</key>
					<string>#paren-expression</string>
				</dict>
			</array>
		</dict>
		<key>function-declaration</key>
		<dict>
			<key>begin</key>
			<string>(?&lt;!\.|\$)\b(?:(export)\s+)?(?:(async)\s+)?(function\b)(?:\s*(\*))?(?:(?:\s+|(?&lt;=\*))([_$[:alpha:]][_$[:alnum:]]*))?\s*</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.export.tsx</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>storage.modifier.async.tsx</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>storage.type.function.tsx</string>
				</dict>
				<key>4</key>
				<dict>
					<key>name</key>
					<string>keyword.generator.asterisk.tsx</string>
				</dict>
				<key>5</key>
				<dict>
					<key>name</key>
					<string>entity.name.function.ts</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?=;|\})|(?&lt;=\})</string>
			<key>name</key>
			<string>meta.function.tsx</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type-parameters</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#function-parameters</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#return-type</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#function-overload-declaration</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#decl-block</string>
				</dict>
			</array>
		</dict>
		<key>function-overload-declaration</key>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.export.tsx</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>storage.modifier.async.tsx</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>storage.type.function.tsx</string>
				</dict>
				<key>4</key>
				<dict>
					<key>name</key>
					<string>keyword.generator.asterisk.tsx</string>
				</dict>
				<key>5</key>
				<dict>
					<key>name</key>
					<string>entity.name.function.tsx</string>
				</dict>
			</dict>
			<key>match</key>
			<string>(?&lt;!\.|\$)\b(?:(export)\s+)?(?:(async)\s+)?(function\b)(?:\s*(\*))?(?:(?:\s+|(?&lt;=\*))([_$[:alpha:]][_$[:alnum:]]*))?\s*</string>
			<key>name</key>
			<string>meta.function.overload.tsx</string>
		</dict>
		<key>function-parameters</key>
		<dict>
			<key>begin</key>
			<string>\(</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.parameters.begin.tsx</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\)</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.parameters.end.tsx</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.parameters.tsx</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#decorator</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#destructuring-parameter</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#parameter-name</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type-annotation</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#variable-initializer</string>
				</dict>
			</array>
		</dict>
		<key>import-declaration</key>
		<dict>
			<key>begin</key>
			<string>(?&lt;!\.|\$)(?:(\bexport)\s+)?\b(import)(?!(\s*:)|(\$))\b</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.export.tsx</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>keyword.control.import.tsx</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?=;|$)</string>
			<key>name</key>
			<string>meta.import.tsx</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#import-export-declaration</string>
				</dict>
			</array>
		</dict>
		<key>import-equals-declaration</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(?&lt;!\.|\$)(?:(\bexport)\s+)?\b(import)\s+([_$[:alpha:]][_$[:alnum:]]*)\s*(=)\s*(require)\s*(\()</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.control.export.tsx</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.control.import.tsx</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>variable.other.readwrite.alias.tsx</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.assignment.tsx</string>
						</dict>
						<key>5</key>
						<dict>
							<key>name</key>
							<string>keyword.control.require.tsx</string>
						</dict>
						<key>6</key>
						<dict>
							<key>name</key>
							<string>meta.brace.round.tsx</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\)</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>meta.brace.round.tsx</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.import-equals.external.tsx</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#comment</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#string</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?&lt;!\.|\$)(?:(\bexport)\s+)?\b(import)\s+([_$[:alpha:]][_$[:alnum:]]*)\s*(=)\s*(?!require\b)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.control.export.tsx</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.control.import.tsx</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>variable.other.readwrite.alias.tsx</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.assignment.tsx</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?=;|$)</string>
					<key>name</key>
					<string>meta.import-equals.internal.tsx</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#comment</string>
						</dict>
						<dict>
							<key>captures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>entity.name.type.module.tsx</string>
								</dict>
								<key>2</key>
								<dict>
									<key>name</key>
									<string>punctuation.accessor.tsx</string>
								</dict>
							</dict>
							<key>match</key>
							<string>([_$[:alpha:]][_$[:alnum:]]*)\s*(\.)</string>
						</dict>
						<dict>
							<key>match</key>
							<string>([_$[:alpha:]][_$[:alnum:]]*)</string>
							<key>name</key>
							<string>variable.other.readwrite.tsx</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>import-export-block</key>
		<dict>
			<key>begin</key>
			<string>\{</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.block.tsx</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\}</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.block.tsx</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.block.tsx</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#import-export-clause</string>
				</dict>
			</array>
		</dict>
		<key>import-export-clause</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.control.default.tsx</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>constant.language.import-export-all.tsx</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>variable.other.readwrite.tsx</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>keyword.control.as.tsx</string>
						</dict>
						<key>5</key>
						<dict>
							<key>name</key>
							<string>invalid.illegal.tsx</string>
						</dict>
						<key>6</key>
						<dict>
							<key>name</key>
							<string>variable.other.readwrite.alias.tsx</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>(default|*|name) as alias</string>
					<key>match</key>
					<string>(?x) (?: \b(default)\b | (\*) | ([_$[:alpha:]][_$[:alnum:]]*)) \s+ (as) \s+ (?: (\b default \b | \*) | ([_$[:alpha:]][_$[:alnum:]]*))</string>
				</dict>
				<dict>
					<key>match</key>
					<string>,</string>
					<key>name</key>
					<string>meta.delimiter.object.comma.tsx</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\*</string>
					<key>name</key>
					<string>constant.language.import-export-all.tsx</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(default)\b</string>
					<key>name</key>
					<string>keyword.control.default.tsx</string>
				</dict>
				<dict>
					<key>match</key>
					<string>([_$[:alpha:]][_$[:alnum:]]*)</string>
					<key>name</key>
					<string>variable.other.readwrite.alias.tsx</string>
				</dict>
			</array>
		</dict>
		<key>import-export-declaration</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#string</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#import-export-block</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\bfrom\b</string>
					<key>name</key>
					<string>keyword.control.from.tsx</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#import-export-clause</string>
				</dict>
			</array>
		</dict>
		<key>indexer-declaration</key>
		<dict>
			<key>begin</key>
			<string>(?:(?&lt;!\.|\$)\b(readonly)\s*)?(\[)</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.modifier.tsx</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>meta.brace.square.tsx</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(\])\s*(\?\s*)?|$</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>meta.brace.square.tsx</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>keyword.operator.optional.tsx</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.indexer.declaration.tsx</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#type-annotation</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#indexer-parameter</string>
				</dict>
			</array>
		</dict>
		<key>indexer-parameter</key>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>variable.parameter.tsx</string>
				</dict>
			</dict>
			<key>match</key>
			<string>([_$[:alpha:]][_$[:alnum:]]*)(?=\:)</string>
			<key>name</key>
			<string>meta.indexer.parameter.tsx</string>
		</dict>
		<key>jsx</key>
		<dict>
			<key>name</key>
			<string>meta.jsx.tsx</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#jsx-tag-without-attributes</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#jsx-tag</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#jsx-tag-invalid</string>
				</dict>
			</array>
		</dict>
		<key>jsx-attributeValue-entities</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.entity.jsxAttributeValue.tsx</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.entity.jsxAttributeValue.tsx</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(&amp;)([a-zA-Z0-9]+|#[0-9]+|#x[0-9a-fA-F]+)(;)</string>
					<key>name</key>
					<string>constant.character.entity.jsxAttributeValue.tsx</string>
				</dict>
				<dict>
					<key>match</key>
					<string>&amp;</string>
					<key>name</key>
					<string>invalid.illegal.bad-ampersand.jsxAttributeValue.tsx</string>
				</dict>
			</array>
		</dict>
		<key>jsx-children</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#jsx-tag-without-attributes</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#jsx-tag</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#jsx-tag-invalid</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#jsx-evaluated-code</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#jsx-entities</string>
				</dict>
			</array>
		</dict>
		<key>jsx-entities</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.entity.tsx</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.entity.tsx</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(&amp;)([a-zA-Z0-9]+|#[0-9]+|#x[0-9a-fA-F]+)(;)</string>
					<key>name</key>
					<string>constant.character.entity.tsx</string>
				</dict>
				<dict>
					<key>match</key>
					<string>&amp;</string>
					<key>name</key>
					<string>invalid.illegal.bad-ampersand.tsx</string>
				</dict>
			</array>
		</dict>
		<key>jsx-evaluated-code</key>
		<dict>
			<key>begin</key>
			<string>{</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.brace.curly.start.tsx</string>
				</dict>
			</dict>
			<key>end</key>
			<string>}</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.brace.curly.end.tsx</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.brace.curly.tsx</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#expression</string>
				</dict>
			</array>
		</dict>
		<key>jsx-string-double-quoted</key>
		<dict>
			<key>begin</key>
			<string>"</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.jsxAttributeValue.begin.tsx</string>
				</dict>
			</dict>
			<key>end</key>
			<string>"</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.jsxAttributeValue.end.tsx</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.jsxAttributeValue.quoted.double.tsx</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#jsx-attributeValue-entities</string>
				</dict>
			</array>
		</dict>
		<key>jsx-string-single-quoted</key>
		<dict>
			<key>begin</key>
			<string>'</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.jsxAttributeValue.begin.tsx</string>
				</dict>
			</dict>
			<key>end</key>
			<string>'</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.jsxAttributeValue.end.tsx</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.jsxAttributeValue.quoted.single.tsx</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#jsx-attributeValue-entities</string>
				</dict>
			</array>
		</dict>
		<key>jsx-tag</key>
		<dict>
			<key>begin</key>
			<string>(?x)
  (&lt;)
  ([_$a-zA-Z][-$\w.]*(?&lt;!\.|-))
  (?=\s+(?!\?)|/?&gt;)</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.tag.begin.tsx</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>entity.name.tag.tsx</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(/&gt;)|(?:(&lt;/)([_$a-zA-Z][-$\w.]*(?&lt;!\.|-))\s*(&gt;))</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.tag.end.tsx</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.tag.begin.tsx</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>entity.name.tag.tsx</string>
				</dict>
				<key>4</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.tag.end.tsx</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.tag.tsx</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>\G(?![/]?&gt;)</string>
					<key>end</key>
					<string>(?=[/]?&gt;)</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#comment</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#jsx-tag-attributes</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#jsx-tag-attributes-illegal</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(&gt;)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.tag.end.tsx</string>
						</dict>
					</dict>
					<key>contentName</key>
					<string>meta.jsx.children.tsx</string>
					<key>end</key>
					<string>(?=&lt;/)</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#jsx-children</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>jsx-tag-attribute-assignment</key>
		<dict>
			<key>match</key>
			<string>=(?=\s*(?:'|"|{|/\*|//|\n))</string>
			<key>name</key>
			<string>keyword.operator.assignment.tsx</string>
		</dict>
		<key>jsx-tag-attribute-name</key>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>entity.other.attribute-name.tsx</string>
				</dict>
			</dict>
			<key>match</key>
			<string>(?x)
  \s*
  ([_$a-zA-Z][-$\w]*)
  (?=\s|=|/?&gt;|/\*|//)</string>
			<key>name</key>
			<string>meta.tag.attribute-name.tsx</string>
		</dict>
		<key>jsx-tag-attributes</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#jsx-tag-attribute-name</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#jsx-tag-attribute-assignment</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#jsx-string-double-quoted</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#jsx-string-single-quoted</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#jsx-evaluated-code</string>
				</dict>
			</array>
		</dict>
		<key>jsx-tag-attributes-illegal</key>
		<dict>
			<key>match</key>
			<string>\S+</string>
			<key>name</key>
			<string>invalid.illegal.attribute.tsx</string>
		</dict>
		<key>jsx-tag-invalid</key>
		<dict>
			<key>match</key>
			<string>&lt;\s*&gt;</string>
			<key>name</key>
			<string>invalid.illegal.tag.incomplete.tsx</string>
		</dict>
		<key>jsx-tag-without-attributes</key>
		<dict>
			<key>begin</key>
			<string>(&lt;)([_$a-zA-Z][-$\w.]*(?&lt;!\.|-))(&gt;)</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.tag.begin.tsx</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>entity.name.tag.tsx</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.tag.end.tsx</string>
				</dict>
			</dict>
			<key>contentName</key>
			<string>meta.jsx.children.tsx</string>
			<key>end</key>
			<string>(&lt;/)([_$a-zA-Z][-$\w.]*(?&lt;!\.|-))(&gt;)</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.tag.begin.tsx</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>entity.name.tag.tsx</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.tag.end.tsx</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.tag.without-attributes.tsx</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#jsx-children</string>
				</dict>
			</array>
		</dict>
		<key>literal</key>
		<dict>
			<key>name</key>
			<string>literal.tsx</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#numeric-literal</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#boolean-literal</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#null-literal</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#undefined-literal</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#numericConstant-literal</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#array-literal</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#this-literal</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#super-literal</string>
				</dict>
			</array>
		</dict>
		<key>method-declaration</key>
		<dict>
			<key>begin</key>
			<string>(?&lt;!\.|\$)(?:\b(abstract)\s+)?(?:\b(public|private|protected)\s+)?(?:\b(async)\s+)?(?:\b(get|set)\s+)?(?=((\bnew)|(?:\b(constructor)\b)|((?:(\*)\s*)?((?:[_$[:alpha:]][_$[:alnum:]]*)|(?:\'[^']*\')|(?:\"[^"]*\")|(?:\[[^\]]*\]))\s*(\??)))?\s*[\(\&lt;])</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.modifier.tsx</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>storage.modifier.tsx</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>storage.modifier.async.tsx</string>
				</dict>
				<key>4</key>
				<dict>
					<key>name</key>
					<string>storage.type.property.tsx</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?=\}|;|,)|(?&lt;=\})</string>
			<key>name</key>
			<string>meta.method.declaration.tsx</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#method-declaration-name</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type-parameters</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#function-parameters</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#return-type</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#method-overload-declaration</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#decl-block</string>
				</dict>
			</array>
		</dict>
		<key>method-declaration-name</key>
		<dict>
			<key>begin</key>
			<string>\G(?!\(|\&lt;)</string>
			<key>end</key>
			<string>(?=\(|\&lt;)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.generator.asterisk.tsx</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(\*)\s*</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#string</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#array-literal</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\bnew(?=\s*[\(\&lt;])</string>
					<key>name</key>
					<string>keyword.operator.new.tsx</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\bconstructor\b(?=\s*[\(\&lt;])</string>
					<key>name</key>
					<string>storage.type.tsx</string>
				</dict>
				<dict>
					<key>match</key>
					<string>[_$[:alpha:]][_$[:alnum:]]*</string>
					<key>name</key>
					<string>entity.name.function.tsx</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\?</string>
					<key>name</key>
					<string>keyword.operator.optional.tsx</string>
				</dict>
			</array>
		</dict>
		<key>method-overload-declaration</key>
		<dict>
			<key>begin</key>
			<string>(?&lt;!\.|\$)(?:\b(abstract)\s+)?(?:\b(public|private|protected)\s+)?(?:\b(async)\s+)?(?:\b(get|set)\s+)?(?=((\bnew)|(?:\b(constructor)\b)|((?:(\*)\s*)?((?:[_$[:alpha:]][_$[:alnum:]]*)|(?:\'[^']*\')|(?:\"[^"]*\")|(?:\[[^\]]*\]))\s*(\??)))?\s*[\(\&lt;])</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.modifier.tsx</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>storage.modifier.tsx</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>storage.modifier.tsx</string>
				</dict>
				<key>4</key>
				<dict>
					<key>name</key>
					<string>storage.type.property.tsx</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?=\(|\&lt;)</string>
			<key>name</key>
			<string>meta.method.overload.declaration.tsx</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#method-declaration-name</string>
				</dict>
			</array>
		</dict>
		<key>namespace-declaration</key>
		<dict>
			<key>begin</key>
			<string>(?&lt;!\.|\$)(?:(\bexport)\s+)?\b(namespace|module)\s+</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.export.tsx</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>storage.type.namespace.tsx</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?=$|\{)</string>
			<key>name</key>
			<string>meta.namespace.declaration.tsx</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#string</string>
				</dict>
				<dict>
					<key>match</key>
					<string>([_$[:alpha:]][_$[:alnum:]]*)</string>
					<key>name</key>
					<string>entity.name.type.module.tsx</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\.</string>
					<key>name</key>
					<string>punctuation.accessor.tsx</string>
				</dict>
			</array>
		</dict>
		<key>new-expr</key>
		<dict>
			<key>begin</key>
			<string>(?&lt;!\.|\$)\b(new)\b(?!\$)</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.operator.new.tsx</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?=[(;),]|$)</string>
			<key>name</key>
			<string>new.expr.tsx</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#type</string>
				</dict>
			</array>
		</dict>
		<key>null-literal</key>
		<dict>
			<key>match</key>
			<string>(?&lt;!\.|\$)\bnull\b(?!\$)</string>
			<key>name</key>
			<string>constant.language.null.tsx</string>
		</dict>
		<key>numeric-literal</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\b(?&lt;!\$)0(x|X)[0-9a-fA-F]+\b(?!\$)</string>
					<key>name</key>
					<string>constant.numeric.hex.tsx</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(?&lt;!\$)0(b|B)[01]+\b(?!\$)</string>
					<key>name</key>
					<string>constant.numeric.binary.tsx</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(?&lt;!\$)0(o|O)?[0-7]+\b(?!\$)</string>
					<key>name</key>
					<string>constant.numeric.octal.tsx</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>constant.numeric.decimal.tsx</string>
						</dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>meta.delimiter.decimal.period.tsx</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>meta.delimiter.decimal.period.tsx</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>meta.delimiter.decimal.period.tsx</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>meta.delimiter.decimal.period.tsx</string>
						</dict>
						<key>5</key>
						<dict>
							<key>name</key>
							<string>meta.delimiter.decimal.period.tsx</string>
						</dict>
						<key>6</key>
						<dict>
							<key>name</key>
							<string>meta.delimiter.decimal.period.tsx</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?x)
(?&lt;!\$)(?:
  (?:\b[0-9]+(\.)[0-9]+[eE][+-]?[0-9]+\b)| # 1.1E+3
  (?:\b[0-9]+(\.)[eE][+-]?[0-9]+\b)|       # 1.E+3
  (?:\B(\.)[0-9]+[eE][+-]?[0-9]+\b)|       # .1E+3
  (?:\b[0-9]+[eE][+-]?[0-9]+\b)|            # 1E+3
  (?:\b[0-9]+(\.)[0-9]+\b)|                # 1.1
  (?:\b[0-9]+(\.)\B)|                      # 1.
  (?:\B(\.)[0-9]+\b)|                      # .1
  (?:\b[0-9]+\b(?!\.))                     # 1
)(?!\$)</string>
				</dict>
			</array>
		</dict>
		<key>numericConstant-literal</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>(?&lt;!\.|\$)\bNaN\b(?!\$)</string>
					<key>name</key>
					<string>constant.language.nan.tsx</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;!\.|\$)\bInfinity\b(?!\$)</string>
					<key>name</key>
					<string>constant.language.infinity.tsx</string>
				</dict>
			</array>
		</dict>
		<key>object-binding-element</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>([_$[:alpha:]][_$[:alnum:]]*)\s*(:)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>variable.object.property.tsx</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.destructuring.tsx</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?=,|\})</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#object-binding-pattern</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#array-binding-pattern</string>
						</dict>
						<dict>
							<key>match</key>
							<string>([_$[:alpha:]][_$[:alnum:]]*)</string>
							<key>name</key>
							<string>variable.other.readwrite.tsx</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>match</key>
					<string>([_$[:alpha:]][_$[:alnum:]]*)</string>
					<key>name</key>
					<string>variable.other.readwrite.tsx</string>
				</dict>
				<dict>
					<key>match</key>
					<string>,</string>
					<key>name</key>
					<string>meta.delimiter.object.comma.tsx</string>
				</dict>
			</array>
		</dict>
		<key>object-binding-pattern</key>
		<dict>
			<key>begin</key>
			<string>\{</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.binding-pattern.object.tsx</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\}</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.binding-pattern.object.tsx</string>
				</dict>
			</dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#object-binding-element</string>
				</dict>
			</array>
		</dict>
		<key>object-literal</key>
		<dict>
			<key>begin</key>
			<string>\{</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.block.tsx</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\}</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.block.tsx</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.object-literal.tsx</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#object-member</string>
				</dict>
			</array>
		</dict>
		<key>object-member</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#method-declaration</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>[_$[:alpha:]][_$[:alnum:]]*\s*:</string>
					<key>end</key>
					<string>(?=,|\})</string>
					<key>name</key>
					<string>meta.object.member.tsx</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#expression</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>operators</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\*=|(?&lt;!\()/=|%=|\+=|\-=</string>
					<key>name</key>
					<string>keyword.operator.assignment.compound.tsx</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\&amp;=|\^=|&lt;&lt;=|&gt;&gt;=|&gt;&gt;&gt;=|\|=</string>
					<key>name</key>
					<string>keyword.operator.assignment.compound.bitwise.tsx</string>
				</dict>
				<dict>
					<key>match</key>
					<string>===|!==|==|!=</string>
					<key>name</key>
					<string>keyword.operator.comparison.tsx</string>
				</dict>
				<dict>
					<key>match</key>
					<string>&lt;=|&gt;=|&lt;&gt;|&lt;|&gt;</string>
					<key>name</key>
					<string>keyword.operator.relational.tsx</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\!|&amp;&amp;|\|\|</string>
					<key>name</key>
					<string>keyword.operator.logical.tsx</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\&amp;|~|\^|\|</string>
					<key>name</key>
					<string>keyword.operator.bitwise.tsx</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\=</string>
					<key>name</key>
					<string>keyword.operator.assignment.tsx</string>
				</dict>
				<dict>
					<key>match</key>
					<string>--</string>
					<key>name</key>
					<string>keyword.operator.decrement.tsx</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\+\+</string>
					<key>name</key>
					<string>keyword.operator.increment.tsx</string>
				</dict>
				<dict>
					<key>match</key>
					<string>%|\*|/|-|\+</string>
					<key>name</key>
					<string>keyword.operator.arithmetic.tsx</string>
				</dict>
			</array>
		</dict>
		<key>parameter-array-binding-element</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#parameter-object-binding-pattern</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#parameter-array-binding-pattern</string>
				</dict>
				<dict>
					<key>match</key>
					<string>([_$[:alpha:]][_$[:alnum:]]*)</string>
					<key>name</key>
					<string>variable.parameter.tsx</string>
				</dict>
				<dict>
					<key>match</key>
					<string>,</string>
					<key>name</key>
					<string>meta.delimiter.object.comma.tsx</string>
				</dict>
			</array>
		</dict>
		<key>parameter-array-binding-pattern</key>
		<dict>
			<key>begin</key>
			<string>\[</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.binding-pattern.array.tsx</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\]</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.binding-pattern.array.tsx</string>
				</dict>
			</dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#parameter-array-binding-element</string>
				</dict>
			</array>
		</dict>
		<key>parameter-name</key>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.modifier.tsx</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>keyword.operator.spread.tsx</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>variable.parameter.tsx</string>
				</dict>
				<key>4</key>
				<dict>
					<key>name</key>
					<string>keyword.operator.optional.tsx</string>
				</dict>
			</dict>
			<key>match</key>
			<string>(?:\s*\b(public|private|protected)\b\s+)?(\.\.\.)?\s*(?&lt;!=|:)([_$[:alpha:]][_$[:alnum:]]*)\s*(\??)</string>
		</dict>
		<key>parameter-object-binding-element</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>([_$[:alpha:]][_$[:alnum:]]*)\s*(:)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>variable.object.property.tsx</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.destructuring.tsx</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?=,|\})</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#parameter-object-binding-pattern</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#parameter-array-binding-pattern</string>
						</dict>
						<dict>
							<key>match</key>
							<string>([_$[:alpha:]][_$[:alnum:]]*)</string>
							<key>name</key>
							<string>variable.parameter.tsx</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>match</key>
					<string>([_$[:alpha:]][_$[:alnum:]]*)</string>
					<key>name</key>
					<string>variable.parameter.tsx</string>
				</dict>
				<dict>
					<key>match</key>
					<string>,</string>
					<key>name</key>
					<string>meta.delimiter.object.comma.tsx</string>
				</dict>
			</array>
		</dict>
		<key>parameter-object-binding-pattern</key>
		<dict>
			<key>begin</key>
			<string>\{</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.binding-pattern.object.tsx</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\}</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.binding-pattern.object.tsx</string>
				</dict>
			</dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#parameter-object-binding-element</string>
				</dict>
			</array>
		</dict>
		<key>paren-expression</key>
		<dict>
			<key>begin</key>
			<string>\(</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>meta.brace.round.tsx</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\)</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>meta.brace.round.tsx</string>
				</dict>
			</dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#expression</string>
				</dict>
			</array>
		</dict>
		<key>property-accessor</key>
		<dict>
			<key>match</key>
			<string>(?&lt;!\.|\$)\b(get|set)\b(?!\$)</string>
			<key>name</key>
			<string>storage.type.property.tsx</string>
		</dict>
		<key>qstring-double</key>
		<dict>
			<key>begin</key>
			<string>"</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.tsx</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(")|((?:[^\\\n])$)</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.tsx</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>invalid.illegal.newline.tsx</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.quoted.double.tsx</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#string-character-escape</string>
				</dict>
			</array>
		</dict>
		<key>qstring-single</key>
		<dict>
			<key>begin</key>
			<string>'</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.tsx</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(\')|((?:[^\\\n])$)</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.tsx</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>invalid.illegal.newline.tsx</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.quoted.single.tsx</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#string-character-escape</string>
				</dict>
			</array>
		</dict>
		<key>regex</key>
		<dict>
			<key>begin</key>
			<string>(?&lt;=[=(:,\[?+!]|return|case|=&gt;|&amp;&amp;|\|\||\*\/)\s*(/)(?![/*+{}?])(?=.*/)</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.tsx</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(/)([gimuy]*)</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.tsx</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>keyword.other.tsx</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.regex.tsx</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#regexp</string>
				</dict>
			</array>
		</dict>
		<key>regex-character-class</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\\[wWsSdD]|\.</string>
					<key>name</key>
					<string>constant.other.character-class.regexp</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\\([0-7]{3}|x\h\h|u\h\h\h\h)</string>
					<key>name</key>
					<string>constant.character.numeric.regexp</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\\c[A-Z]</string>
					<key>name</key>
					<string>constant.character.control.regexp</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\\.</string>
					<key>name</key>
					<string>constant.character.escape.backslash.regexp</string>
				</dict>
			</array>
		</dict>
		<key>regexp</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\\[bB]|\^|\$</string>
					<key>name</key>
					<string>keyword.control.anchor.regexp</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\\[1-9]\d*</string>
					<key>name</key>
					<string>keyword.other.back-reference.regexp</string>
				</dict>
				<dict>
					<key>match</key>
					<string>[?+*]|\{(\d+,\d+|\d+,|,\d+|\d+)\}\??</string>
					<key>name</key>
					<string>keyword.operator.quantifier.regexp</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\|</string>
					<key>name</key>
					<string>keyword.operator.or.regexp</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>(\()((\?=)|(\?!))</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.group.regexp</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.group.assertion.regexp</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>meta.assertion.look-ahead.regexp</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>meta.assertion.negative-look-ahead.regexp</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(\))</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.group.regexp</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.group.assertion.regexp</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#regexp</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>\((\?:)?</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.group.regexp</string>
						</dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.group.capture.regexp</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\)</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.group.regexp</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.group.regexp</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#regexp</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>(\[)(\^)?</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.character-class.regexp</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.negation.regexp</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(\])</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.character-class.regexp</string>
						</dict>
					</dict>
					<key>name</key>
					<string>constant.other.character-class.set.regexp</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>captures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>constant.character.numeric.regexp</string>
								</dict>
								<key>2</key>
								<dict>
									<key>name</key>
									<string>constant.character.control.regexp</string>
								</dict>
								<key>3</key>
								<dict>
									<key>name</key>
									<string>constant.character.escape.backslash.regexp</string>
								</dict>
								<key>4</key>
								<dict>
									<key>name</key>
									<string>constant.character.numeric.regexp</string>
								</dict>
								<key>5</key>
								<dict>
									<key>name</key>
									<string>constant.character.control.regexp</string>
								</dict>
								<key>6</key>
								<dict>
									<key>name</key>
									<string>constant.character.escape.backslash.regexp</string>
								</dict>
							</dict>
							<key>match</key>
							<string>(?:.|(\\(?:[0-7]{3}|x\h\h|u\h\h\h\h))|(\\c[A-Z])|(\\.))\-(?:[^\]\\]|(\\(?:[0-7]{3}|x\h\h|u\h\h\h\h))|(\\c[A-Z])|(\\.))</string>
							<key>name</key>
							<string>constant.other.character-class.range.regexp</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#regex-character-class</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>include</key>
					<string>#regex-character-class</string>
				</dict>
			</array>
		</dict>
		<key>return-type</key>
		<dict>
			<key>begin</key>
			<string>(?&lt;=\))\s*:</string>
			<key>end</key>
			<string>(?&lt;!:)((?=$)|(?=\{|;|//))</string>
			<key>name</key>
			<string>meta.return.type.tsx</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?&lt;=:)\s*(\{)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.block.tsx</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\}</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.block.tsx</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.object.type.tsx</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#type-object-members</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>include</key>
					<string>#type-predicate-operator</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type</string>
				</dict>
			</array>
		</dict>
		<key>statements</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#jsx</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#string</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#regex</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#template</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#declaration</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#switch-statement</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#for-loop</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#after-operator-block</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#decl-block</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#control-statement</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#expression</string>
				</dict>
			</array>
		</dict>
		<key>static-modifier</key>
		<dict>
			<key>match</key>
			<string>(?&lt;!\.|\$)\b(static)\b(?!\$)</string>
			<key>name</key>
			<string>storage.modifier.tsx</string>
		</dict>
		<key>string</key>
		<dict>
			<key>name</key>
			<string>string.tsx</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#qstring-single</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#qstring-double</string>
				</dict>
			</array>
		</dict>
		<key>string-character-escape</key>
		<dict>
			<key>match</key>
			<string>\\(x\h{2}|[0-2][0-7]{0,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.|$)</string>
			<key>name</key>
			<string>constant.character.escape.tsx</string>
		</dict>
		<key>super-literal</key>
		<dict>
			<key>match</key>
			<string>(?&lt;!\.|\$)\bsuper\b(?!\$)</string>
			<key>name</key>
			<string>variable.language.super.tsx</string>
		</dict>
		<key>switch-block</key>
		<dict>
			<key>begin</key>
			<string>{</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.block.tsx</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?=\})</string>
			<key>name</key>
			<string>switch-block.expr.tsx</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#case-clause</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#statements</string>
				</dict>
			</array>
		</dict>
		<key>switch-expression</key>
		<dict>
			<key>begin</key>
			<string>(?&lt;!\.|\$)\b(switch)\s*(\()</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.switch.tsx</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>meta.brace.round.tsx</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\)</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>meta.brace.round.tsx</string>
				</dict>
			</dict>
			<key>name</key>
			<string>switch-expression.expr.tsx</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#expression</string>
				</dict>
			</array>
		</dict>
		<key>switch-statement</key>
		<dict>
			<key>begin</key>
			<string>(?&lt;!\.|\$)(?=\bswitch\s*\()</string>
			<key>end</key>
			<string>}</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.block.tsx</string>
				</dict>
			</dict>
			<key>name</key>
			<string>switch-statement.expr.tsx</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#switch-expression</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#switch-block</string>
				</dict>
			</array>
		</dict>
		<key>template</key>
		<dict>
			<key>begin</key>
			<string>([_$[:alpha:]][_$[:alnum:]]*)?(`)</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>entity.name.function.tagged-template.tsx</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.template.begin.tsx</string>
				</dict>
			</dict>
			<key>end</key>
			<string>`</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.template.end.tsx</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.template.tsx</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#template-substitution-element</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#string-character-escape</string>
				</dict>
			</array>
		</dict>
		<key>template-substitution-element</key>
		<dict>
			<key>begin</key>
			<string>\$\{</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.template-expression.begin.tsx</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\}</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.template-expression.end.tsx</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.template.expression.tsx</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#expression</string>
				</dict>
			</array>
		</dict>
		<key>ternary-expression</key>
		<dict>
			<key>begin</key>
			<string>(?=\?)</string>
			<key>end</key>
			<string>(?=$|[;,})\]])</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#ternary-operator</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#expression</string>
				</dict>
			</array>
		</dict>
		<key>ternary-operator</key>
		<dict>
			<key>begin</key>
			<string>(\?)</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>keyword.operator.ternary.tsx</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(:)</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>keyword.operator.ternary.tsx</string>
				</dict>
			</dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#expression</string>
				</dict>
			</array>
		</dict>
		<key>this-literal</key>
		<dict>
			<key>match</key>
			<string>(?&lt;!\.|\$)\bthis\b(?!\$)</string>
			<key>name</key>
			<string>variable.language.this.tsx</string>
		</dict>
		<key>type</key>
		<dict>
			<key>name</key>
			<string>meta.type.tsx</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#string</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type-primitive</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type-builtin-literals</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#typeof-operator</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type-parameters</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type-tuple</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type-object</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type-operator</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type-paren-or-function-parameters</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type-function-return-type</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type-name</string>
				</dict>
			</array>
		</dict>
		<key>type-annotation</key>
		<dict>
			<key>begin</key>
			<string>:</string>
			<key>end</key>
			<string>(?=$|[,);\}\]]|//)|(?==[^&gt;])|(?&lt;=[\}&gt;\]\)]|[_$[:alpha:]])\s*(?=\{)</string>
			<key>name</key>
			<string>meta.type.annotation.tsx</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type</string>
				</dict>
			</array>
		</dict>
		<key>type-builtin-literals</key>
		<dict>
			<key>match</key>
			<string>(?&lt;!\.|\$)\b(this|true|false|undefined|null)\b(?!\$)</string>
			<key>name</key>
			<string>support.type.builtin.tsx</string>
		</dict>
		<key>type-declaration</key>
		<dict>
			<key>begin</key>
			<string>(?&lt;!\.|\$)(?:(\bexport)\s+)?\b(type)\b\s+([_$[:alpha:]][_$[:alnum:]]*)\s*</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.export.tsx</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>storage.type.type.tsx</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>entity.name.type.tsx</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?=$|[,);&gt;]|\bvar\b|\blet\b|\bconst\b|\btype\b|\bfunction\b|\bclass\b|\binterface\b|\bnamespace\b|\bmodule\b|\bimport\b|\benum\b|\bdeclare\b|\bexport\b|\babstract\b|\basync\b)</string>
			<key>name</key>
			<string>meta.type.declaration.tsx</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type-parameters</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type</string>
				</dict>
				<dict>
					<key>match</key>
					<string>=\s*</string>
					<key>name</key>
					<string>keyword.operator.assignment.tsx</string>
				</dict>
			</array>
		</dict>
		<key>type-function-return-type</key>
		<dict>
			<key>begin</key>
			<string>=&gt;</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>storage.type.function.arrow.tsx</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?&lt;!=&gt;)(?=[,\]\)\{\}=;&gt;]|//|$)</string>
			<key>name</key>
			<string>meta.type.function.return.tsx</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>(?&lt;==&gt;)\s*(\{)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.block.tsx</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\}</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.block.tsx</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.object.type.tsx</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#type-object-members</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>include</key>
					<string>#type-predicate-operator</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type</string>
				</dict>
			</array>
		</dict>
		<key>type-name</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>entity.name.type.module.tsx</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.accessor.tsx</string>
						</dict>
					</dict>
					<key>match</key>
					<string>([_$[:alpha:]][_$[:alnum:]]*)\s*(\.)</string>
				</dict>
				<dict>
					<key>match</key>
					<string>[_$[:alpha:]][_$[:alnum:]]*</string>
					<key>name</key>
					<string>entity.name.type.tsx</string>
				</dict>
			</array>
		</dict>
		<key>type-object</key>
		<dict>
			<key>begin</key>
			<string>\{</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.block.tsx</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\}</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.block.tsx</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.object.type.tsx</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#type-object-members</string>
				</dict>
			</array>
		</dict>
		<key>type-object-members</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#field-declaration</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#method-declaration</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#indexer-declaration</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type-annotation</string>
				</dict>
			</array>
		</dict>
		<key>type-operator</key>
		<dict>
			<key>match</key>
			<string>[&amp;|]</string>
			<key>name</key>
			<string>keyword.operator.type.tsx</string>
		</dict>
		<key>type-parameters</key>
		<dict>
			<key>begin</key>
			<string>(&lt;)</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.typeparameters.begin.tsx</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?=$)|(&gt;)</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.typeparameters.end.tsx</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.type.parameters.tsx</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?&lt;!\.|\$)\b(extends)\b(?!\$)</string>
					<key>name</key>
					<string>storage.modifier.tsx</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type</string>
				</dict>
			</array>
		</dict>
		<key>type-paren-or-function-parameters</key>
		<dict>
			<key>begin</key>
			<string>(?:(?&lt;!\.|\$)\b(new)\b)?\s*(\()</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.new.tsx</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>meta.brace.round.tsx</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\)</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>meta.brace.round.tsx</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.type.paren.cover.tsx</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#type</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#function-parameters</string>
				</dict>
			</array>
		</dict>
		<key>type-predicate-operator</key>
		<dict>
			<key>match</key>
			<string>(?&lt;!\.|\$)\bis\b(?!\$)</string>
			<key>name</key>
			<string>keyword.operator.is.tsx</string>
		</dict>
		<key>type-primitive</key>
		<dict>
			<key>match</key>
			<string>(?&lt;!\.|\$)\b(string|number|boolean|symbol|any|void|never)\b(?!\$)</string>
			<key>name</key>
			<string>support.type.primitive.tsx</string>
		</dict>
		<key>type-tuple</key>
		<dict>
			<key>begin</key>
			<string>\[</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>meta.brace.square.tsx</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\]</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>meta.brace.square.tsx</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.type.tuple.tsx</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#type</string>
				</dict>
			</array>
		</dict>
		<key>typeof-operator</key>
		<dict>
			<key>match</key>
			<string>(?&lt;!\.|\$)\btypeof\b(?!\$)</string>
			<key>name</key>
			<string>keyword.operator.typeof.tsx</string>
		</dict>
		<key>undefined-literal</key>
		<dict>
			<key>match</key>
			<string>(?&lt;!\.|\$)\bundefined\b(?!\$)</string>
			<key>name</key>
			<string>constant.language.undefined.tsx</string>
		</dict>
		<key>var-expr</key>
		<dict>
			<key>begin</key>
			<string>(?&lt;!\.|\$)(?:(\bexport)\s+)?\b(var|let|const(?!\s+enum\b))\b(?!\$)</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.export.tsx</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>storage.type.tsx</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?=$|;|}|(\s+(of|in)\s+))</string>
			<key>name</key>
			<string>meta.var.expr.tsx</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#destructuring-variable</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#var-single-variable</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
			</array>
		</dict>
		<key>var-single-variable</key>
		<dict>
			<key>begin</key>
			<string>([_$[:alpha:]][_$[:alnum:]]*)</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>variable.other.readwrite.tsx</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?=$|[;,}]|(\s+(of|in)\s+))</string>
			<key>name</key>
			<string>meta.var-single-variable.expr.tsx</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#variable-initializer</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>\G</string>
					<key>end</key>
					<string>(?!\G)(?=$|[;,=}]|(\s+(of|in)\s+))</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#type-annotation</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#string</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#comment</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>variable-initializer</key>
		<dict>
			<key>begin</key>
			<string>(?&lt;!=|!)(=)(?!=)</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.operator.assignment.tsx</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?=$|[,);}])</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#expression</string>
				</dict>
			</array>
		</dict>
	</dict>
	<key>scopeName</key>
	<string>source.tsx</string>
	<key>uuid</key>
	<string>805375ec-d614-41f5-8993-5843fe63ea82</string>
</dict>
</plist>
